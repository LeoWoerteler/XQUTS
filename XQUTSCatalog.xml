<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="XQUTSCatalog.xsl" ?>
<test-suite
   xmlns="http://www.w3.org/2005/02/query-test-update"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   CatalogDesignDate="2003-04-03"
   version="0.1.0"
   SourceOffsetPath="./"
   ResultOffsetPath="ExpectedTestResults/"
   XQueryQueryOffsetPath="Queries/XQuery/" 
   XQueryXQueryOffsetPath="Queries/XQueryX/" 
   XQueryFileExtension=".xq"
   XQueryXFileExtension=".xqx" 
   
   xsi:schemaLocation="http://www.w3.org/2005/02/query-test-update XQUTSCatalog.xsd">

   <test-suite-info> 
      <title>XQuery Update Test Suite 0.1.0</title> 
      <description> 
         Test Suite for XQuery Update 0.1.0. 
         See http://www.w3.org/XML/Query/test-suite/update. 
      </description> 
   </test-suite-info> 

   <citations>
      <citation-spec name="XQUPDATE">
         <description last-mod="2006-04-12">XQuery Update Facility</description>
         <spec-URI>http://www.w3.org/TR/xqupdate/</spec-URI>
      </citation-spec>
   </citations>
   <comparisons>
      <comparison name="XML">
         <description last-mod="2003-03-25">The XML InfoSets should be canonicalized and compared.</description>
      </comparison>
      <comparison name="Fragment">
         <description last-mod="2004-10-20">
            A 'fragment' refers to an XML based instance which has multiple top-level elements and NO XML declaration.
            The comparator for this should simply wrap the entire fragment in a container element and perform XML comparison.
         </description>
      </comparison>
      <comparison name="Text">
         <description last-mod="2003-03-25">
            Each line of non-whitespace text should match. New-line sequences
            may vary and should be neutralized. Due to issues with the XML serialization of certain characters (e.g. '&lt;'),
            it is not possible to simply compare the actual and expected results. Rather (as is the case with the 'Fragment' comparator)
            the test harness should convert the results into valid XML (by adding a container element) and perform comparison
            on the XML canonicalized versions of the results.
         </description>
      </comparison>
      <comparison name="Ignore">
         <description last-mod="2003-03-25">
            Only the presence/absence of this file is significant,
            not its content.
         </description>
      </comparison>
      <comparison name="Inspect">
         <description last-mod="2003-03-25">
            Automated comparison is not possible. the output should be
            inspected by a human.
         </description>
      </comparison>
   </comparisons>
   <roles>
      <role name="principal-data">
         <description last-mod="2003-03-25">
            This is the source that is handed in to the processor as the
            initial input sequence, setting the "evaluation context" as described in XQuery chapter 2.
         </description>
      </role>
      <role name="supplemental-data">
         <description last-mod="2003-03-25">
            These are sources that may be read by functions such as
            fn:document() as the query is evaluated.
         </description>
      </role>
      <role name="schema">
         <description last-mod="2003-03-25">
            These are schema definitions that may be referenced by sources
            or in the query.
         </description>
      </role>
      <role name="dtd">
         <description last-mod="2003-03-25">
            These are dtd definitions that may be referenced by sources
            or in the query.
         </description>
      </role>
      <role name="principal">
         <description last-mod="2003-03-25">
            This is an output (either text or XML) that will contain the
            query results. If the processor invocation sequence accepts a filename for results, this name may be
            passed, possibly prefixed by a partial directory path to allow storage of the results in a separate
            directory tree.
         </description>
      </role>
      <role name="console-log">
         <description last-mod="2003-03-25">
            This is an output (text file tagged .log) that will contain the
            captured "console" output for a command-line invocation, or equivalent messages from a harness. The
            main goal is to capture error messages that came from the processor.
         </description>
         <note>
            A test lab may choose to capture console output for every test case, in which case the presence
            of this element is a signal that the console log of this test contains messages that are significant to
            the pass/fail determination.
         </note>
      </role>
   </roles>
   <scenarios>
      <scenario name="standard">
         <description last-mod="2005-06-10">
            A query this is expected to produce valid results. Principal input should always be specified, even if the query doesn't have any PathExpr.
         </description>
      </scenario>
      <scenario name="parse-error">
         <description last-mod="2005-06-10">
            A query this is expected to raise a parsing/syntax error at query parse time. Principal input should always be specified, even if the query doesn't have any PathExpr.
         </description>
      </scenario>
      <scenario name="runtime-error">
         <description last-mod="2005-06-10">
            A query this is expected to raise a runtime error at query parse time. Runtime errors in this case include those raised by static typing rules. Principal input should always be specified, even if the query doesn't have any PathExpr.
         </description>
      </scenario>
      <scenario name="trivial">
         <description last-mod="2006-03-29">
            A query this is expected to produce valid results. Principal input should always be specified, even if the query doesn't have any PathExpr.
            The initial query returns an &lt;xqx:xquery&gt; element (Trivial Embedding of XQuery).
            This embedded query is then executed to produce the final result.
         </description>
      </scenario>
   </scenarios>
   <sources>
      <source ID="XQUTSCatalog" FileName="XQUTSCatalog.xml" Creator="XQuery Test Task Force" schema="XQUTSCatalogxsd">
         <description last-mod="2005-04-14">XQuery Test Suite Catalog</description>
      </source>
      <source ID="emptydoc" FileName="TestSources/emptydoc.xml" Creator="David Marston">
         <description last-mod="2003-03-25">Contains just a "doc" element, no comments/text/PIs.</description>
      </source>      
      <source ID="airports" FileName="TestSources/airports.xml" Creator="spec-authors">
         <description last-mod="2006-05-08">Data for use cases.</description>
      </source>      
      <source ID="soapMsg" FileName="TestSources/soapMsg.xml" Creator="spec-authors">
         <description last-mod="2006-05-08">Data for use cases.</description>
      </source>
      <source ID="archive" FileName="TestSources/archive.xml" Creator="spec-authors">
         <description last-mod="2006-05-08">Data for use cases.</description>
      </source>
      <source ID="copy1" FileName="TestSources/copy1.xml" Creator="spec-authors">
         <description last-mod="2006-05-08">Data for use cases.</description>
      </source>
      <source ID="copy2" FileName="TestSources/copy2.xml" Creator="spec-authors">
         <description last-mod="2006-05-08">Data for use cases.</description>
      </source>
      <source ID="grant" FileName="TestSources/grant.xml" Creator="spec-authors">
         <description last-mod="2006-05-08">Data for use cases.</description>
      </source>
      <source ID="log" FileName="TestSources/log.xml" Creator="spec-authors">
         <description last-mod="2006-05-08">Data for use cases.</description>
      </source>
      <source ID="part-list" FileName="TestSources/part-list.xml" Creator="spec-authors">
         <description last-mod="2006-05-08">Data for use cases.</description>
      </source>
      <source ID="part-tree" FileName="TestSources/part-tree.xml" Creator="spec-authors">
         <description last-mod="2006-05-08">Data for use cases.</description>
      </source>
      <source ID="items" FileName="TestSources/items.xml" Creator="XML Query WG">
         <description last-mod="2005-02-11">Data for the the XML Query RDB use cases</description>
      </source>
      <source ID="bids" FileName="TestSources/bids.xml" Creator="XML Query WG">
         <description last-mod="2005-02-11">Data for the the XML Query RDB use cases</description>
      </source>
      <source ID="users" FileName="TestSources/users.xml" Creator="XML Query WG">
         <description last-mod="2005-02-11">Data for the the XML Query RDB use cases</description>
      </source>      
      <source ID="users2" FileName="TestSources/users2.xml" Creator="XML Query WG">
         <description last-mod="2005-02-11">Data for the the XML Query RDB use cases (Includes Anabel Lee)</description>
      </source>      
      <source ID="employees" FileName="TestSources/employees.xml" Creator="XML Query Working Group">
         <description last-mod="2006-05-08">Data for nil use case</description>
      </source>  
      <source ID="employeesNIST" FileName="TestSources/employeesNIST.xml" Creator="CarmeloMontanez">
         <description last-mod="2006-05-08">One of the main data files for the NIST tests</description>
      </source>       
      <source ID="works-mod" FileName="TestSources/works-mod.xml" Creator="Carmelo Montanez">
         <description last-mod="2005-02-11">One of the main XML File used by NIST tests.</description>
      </source>       
      <schema ID="XQUTSCatalogxsd" uri="http://www.w3.org/2005/02/query-test-update" FileName="XQUTSCatalog.xsd">
         <description last-mod="2005-04-14">Schema for Update Catalog</description>
      </schema>          	        
   </sources>
   <implementation-defined-items>
     <implementation-defined-item spec = "XQUPDATE" name = "Space Holder for now">
       <description last-mod="2005-04-04">The statically-known collations.</description>
     </implementation-defined-item>
   </implementation-defined-items>
   <features>
      <feature name="Minimal Conformance"/>
   </features>
   <context-properties>
     <context-property context-type = "static" name = "SpaceHolderfornow"/>
   </context-properties>
  <test-group name="UpdateFacility">
     <GroupInfo>
         <title>Update Facility Tests</title>
         <description/>
    </GroupInfo>
   <test-group name="UseCases">
     <GroupInfo>
         <title>XML Query Update Use Cases</title>
         <description/>
      </GroupInfo>
      <test-group name="RelationalDataUpdates">
        <GroupInfo>
            <title>Use Cases "R" - Updating Relational Data</title>
            <description/>
         </GroupInfo>
          <test-case  name="relational-data-q1" FilePath="UseCases/RelationalDataUpdates/" scenario="standard" Creator="Update Task Force">
           <description>Update Use Case # 1</description>
           <spec-citation spec="XQUPDATE" section-number="1.1.4.1" section-title="Q1" section-pointer="rdb-updates-results-u1"/>
           <state time="0">
            <query name="relational-data-q1" date="2005-02-03"/>
            <input-file role="principal-data" variable="users">users</input-file>
           </state>
           <state time="1">
            <query name="relational-data-q1-test" date="2007-02-01"/>
            <input-file role="principal-data" variable="users">users</input-file>
            <output-file role="principal" compare="Fragment">relational-data-q1-results.xml</output-file>
           </state>
          </test-case>  
          <test-case  name="relational-data-q2" FilePath="UseCases/RelationalDataUpdates/" scenario="standard" Creator="Update Task Force">
           <description>Update Use Case # 2</description>
           <spec-citation spec="XQUPDATE" section-number="1.1.4.2" section-title="Q2" section-pointer="rdb-updates-results-u2"/>
           <state time="0">
            <query name="relational-data-q2" date="2006-08-05"/>
            <input-file role="principal-data" variable="users">users2</input-file>
            <input-file role="principal-data" variable="bids">bids</input-file>            
           </state>
           <state time="1">
            <query name="relational-data-q2-test" date="2007-02-01"/>
            <input-file role="principal-data" variable="users">users2</input-file>
            <input-file role="principal-data" variable="bids">bids</input-file>           
            <output-file role="principal" compare="Fragment">relational-data-q2-results.xml</output-file>
           </state>
          </test-case>
          <test-case  name="relational-data-q3" FilePath="UseCases/RelationalDataUpdates/" scenario="standard" Creator="Update Task Force">
           <description>Update Use Case # 3</description>
           <spec-citation spec="XQUPDATE" section-number="1.1.4.3" section-title="Q3" section-pointer="rdb-updates-results-u3"/>
           <state time="0">
            <query name="relational-data-q3" date="2006-08-05"/>
            <input-file role="principal-data" variable="users">users2</input-file>
            <input-file role="principal-data" variable="bids">bids</input-file>
           </state>
           <state time="1">
            <query name="relational-data-q3-test" date="2007-02-01"/>
            <input-file role="principal-data" variable="users">users2</input-file>
            <input-file role="principal-data" variable="bids">bids</input-file>
            <output-file role="principal" compare="Fragment">relational-data-q3-results.xml</output-file>
           </state>
          </test-case>
          <test-case  name="relational-data-q4" FilePath="UseCases/RelationalDataUpdates/" scenario="standard" Creator="Update Task Force">
           <description>Update Use Case # 4</description>
           <spec-citation spec="XQUPDATE" section-number="1.1.4.4" section-title="Q4" section-pointer="rdb-updates-results-u4"/>
           <state time="0">
            <query name="relational-data-q4" date="2006-08-05"/>
            <input-file role="principal-data" variable="users">users2</input-file>
           </state>
           <state time="1">
            <query name="relational-data-q4-test" date="2007-02-01"/>
            <input-file role="principal-data" variable="users">users2</input-file>
            <output-file role="principal" compare="Fragment">relational-data-q4-results.xml</output-file>
           </state>
          </test-case>
          <test-case  name="relational-data-q5-1" FilePath="UseCases/RelationalDataUpdates/" scenario="standard" Creator="Update Task Force">
           <description>Update Use Case # 5</description>
           <spec-citation spec="XQUPDATE" section-number="1.1.4.5" section-title="Q5" section-pointer="rdb-updates-results-u5"/>
           <state time="0">
            <query name="relational-data-q5-1" date="2006-08-05"/>
            <input-file role="principal-data" variable="users">users2</input-file>
            <input-file role="principal-data" variable="bids">bids</input-file>
           </state>
           <state time="1">
            <query name="relational-data-q5-1-test" date="2007-02-01"/>
            <input-file role="principal-data" variable="users">users2</input-file>
            <input-file role="principal-data" variable="bids">bids</input-file>
            <output-file role="principal" compare="Text">relational-data-q5-results-1.txt</output-file>
           </state>
          </test-case>  
          <test-case  name="relational-data-q5-2" FilePath="UseCases/RelationalDataUpdates/" scenario="standard" Creator="Update Task Force">
           <description>Update Use Case # 5</description>
           <spec-citation spec="XQUPDATE" section-number="1.1.4.5" section-title="Q5" section-pointer="rdb-updates-results-u5"/>
           <state time="0">
            <query name="relational-data-q5-2" date="2006-08-05"/>
            <input-file role="principal-data" variable="users">users2</input-file>
            <input-file role="principal-data" variable="bids">bids</input-file>
           </state>
           <state time="1">
            <query name="relational-data-q5-2-test" date="2007-02-01"/>
            <input-file role="principal-data" variable="users">users2</input-file>
            <input-file role="principal-data" variable="bids">bids</input-file>
            <output-file role="principal" compare="Fragment">relational-data-q5-results-2.xml</output-file>
           </state>
          </test-case>           
          <test-case  name="relational-data-q6-1" FilePath="UseCases/RelationalDataUpdates/" scenario="standard" Creator="Update Task Force">
           <description>Update Use Case # 6</description>
           <spec-citation spec="XQUPDATE" section-number="1.1.4.6" section-title="Q6" section-pointer="rdb-updates-results-u6"/>
           <state time="0">
            <query name="relational-data-q6-1" date="2006-08-05"/>
            <input-file role="principal-data" variable="users">users</input-file>
            <input-file role="principal-data" variable="items">items</input-file>
            <input-file role="principal-data" variable="bids">bids</input-file>
           </state>
           <state time="1">
            <query name="relational-data-q6-test" date="2007-02-01"/>
            <input-file role="principal-data" variable="users">users</input-file>
            <input-file role="principal-data" variable="items">items</input-file>            
            <input-file role="principal-data" variable="bids">bids</input-file>
            <output-file role="principal" compare="Fragment">relational-data-q6-results-1.xml</output-file>
           </state>
          </test-case>
          <test-case  name="relational-data-q6-2" FilePath="UseCases/RelationalDataUpdates/" scenario="standard" Creator="Update Task Force">
           <description>Update Use Case # 6 - Alternate method</description>
           <spec-citation spec="XQUPDATE" section-number="1.1.4.6" section-title="Q6" section-pointer="rdb-updates-results-u6"/>
           <state time="0">
            <query name="relational-data-q6-2" date="2006-08-05"/>
            <input-file role="principal-data" variable="users">users</input-file>
            <input-file role="principal-data" variable="items">items</input-file>
            <input-file role="principal-data" variable="bids">bids</input-file>
           </state>
           <state time="1">
            <query name="relational-data-q6-test" date="2007-02-01"/>
            <input-file role="principal-data" variable="users">users</input-file>
            <input-file role="principal-data" variable="items">items</input-file>            
            <input-file role="principal-data" variable="bids">bids</input-file>
            <output-file role="principal" compare="Fragment">relational-data-q6-results-1.xml</output-file>
           </state>
          </test-case>   
          <test-case  name="relational-data-q7" FilePath="UseCases/RelationalDataUpdates/" scenario="standard" Creator="Update Task Force">
           <description>Update Use Case # 7</description>
           <spec-citation spec="XQUPDATE" section-number="1.1.4.7" section-title="Q7" section-pointer="rdb-updates-results-u7"/>
           <state time="0">
            <query name="relational-data-q7" date="2006-08-05"/>
            <input-file role="principal-data" variable="items">items</input-file>
            <output-file role="principal" compare="Fragment">relational-data-q7-results-1.xml</output-file>
            <expected-error>*</expected-error>            
           </state>
           <state time="1">
            <query name="relational-data-q7-test" date="2007-02-01"/>
            <input-file role="principal-data" variable="items">items</input-file>
            <output-file role="principal" compare="Fragment">relational-data-q7-results-2.xml</output-file>
           </state>
          </test-case>    
          <test-case  name="relational-data-q8" FilePath="UseCases/RelationalDataUpdates/" scenario="standard" Creator="Update Task Force">
           <description>Update Use Case # 8</description>
           <spec-citation spec="XQUPDATE" section-number="1.1.4.8" section-title="Q8" section-pointer="rdb-updates-results-q8"/>
           <state time="0">
            <query name="relational-data-q8" date="2006-08-05"/>
            <input-file role="principal-data" variable="users">users2</input-file>
            <input-file role="principal-data" variable="bids">bids</input-file>
            <output-file role="principal" compare="Fragment">relational-data-q8-results-1.xml</output-file>            
            <expected-error>*</expected-error>            
           </state>
           <state time="1">
            <query name="relational-data-q8-test" date="2007-02-01"/>
            <input-file role="principal-data" variable="users">users2</input-file>
            <input-file role="principal-data" variable="bids">bids</input-file>            
            <output-file role="principal" compare="Fragment">relational-data-q8-results-2.xml</output-file>
            <output-file role="principal" compare="Fragment">relational-data-q8-results-3.xml</output-file>
           </state>
          </test-case>    
          <test-case  name="relational-data-q9" FilePath="UseCases/RelationalDataUpdates/" scenario="standard" Creator="Update Task Force">
           <description>Update Use Case # 9</description>
           <spec-citation spec="XQUPDATE" section-number="1.1.4.9" section-title="Q9" section-pointer="rdb-updates-results-u9"/>
           <state time="0">
            <query name="relational-data-q9" date="2006-08-05"/>
            <input-file role="principal-data" variable="users">users2</input-file>
            <input-file role="principal-data" variable="bids">bids</input-file>  
            <output-file role="principal" compare="Fragment">relational-data-q9-results-1.xml</output-file>                       
            <expected-error>*</expected-error>                       
           </state>
           <state time="1">
            <query name="relational-data-q9-test" date="2007-02-01"/>
            <input-file role="principal-data" variable="users">users2</input-file>
            <input-file role="principal-data" variable="bids">bids</input-file>
            <output-file role="principal" compare="Fragment">relational-data-q9-results-2.xml</output-file>
            <output-file role="principal" compare="Fragment">relational-data-q9-results-3.xml</output-file>
           </state>
          </test-case>
        </test-group> 
        <test-group name="AddressBookUpdates">
         <GroupInfo>
            <title>Use Cases "address Book" - Synchronizing address book entries</title>
            <description/>
         </GroupInfo>          
          <test-case  name="address-book-q1" FilePath="UseCases/AddressBookUpdates/" scenario="standard" Creator="Update Task Force">
           <description>Address Book Use case # 1</description>
           <spec-citation spec="XQUPDATE" section-number="1.2.2" section-title="Q1" section-pointer="addrbook-q1"/>
           <state time="0">
            <query name="address-book-q1" date="2006-08-05"/>
            <input-file role="principal-data" variable="archive">archive</input-file>
            <input-file role="principal-data" variable="copy1">copy1</input-file>   
            <input-file role="principal-data" variable="copy2">copy2</input-file>                     
            <input-file role="principal-data" variable="log">log</input-file>            
            <expected-error>XUDY0017</expected-error>
           </state>
<!--            <state time="1"> -->
<!--             <query name="address-book-q1-test" date="2007-02-01"/>      -->
<!--             <output-file role="principal" compare="Fragment">address-book-q1-results.xml</output-file> -->
<!--            </state> -->
          </test-case>
        </test-group>
        <test-group name="SoapUpdates">
         <GroupInfo>
            <title>Use Cases "Soap" - processing messages</title>
            <description/>
         </GroupInfo>             
          <test-case  name="soap-q1" FilePath="UseCases/SoapUpdates/" scenario="standard" Creator="Update Task Force">
           <description>Soap Use case # 1</description>
           <spec-citation spec="XQUPDATE" section-number="1.3.2" section-title="Q1" section-pointer="soap-q1"/>
           <state time="0">
            <query name="soap-q1" date="2006-08-05"/>
            <input-file role="principal-data" variable="airportsDoc">airports</input-file>
            <input-file role="principal-data" variable="msg">soapMsg</input-file>
            <output-file role="principal" compare="Fragment">soap-q1-results.xml</output-file>
           </state>
          </test-case>
        </test-group>  
        <test-group name="NamespacesUpdates">
         <GroupInfo>
            <title>Use Cases "Namespaces" - moving elements from one namespace to another</title>
            <description/>
         </GroupInfo>           
          <test-case  name="namespaces-q1" FilePath="UseCases/NamespacesUpdates/" scenario="standard" Creator="Update Task Force">
           <description>namespaces Use case # 1</description>
           <spec-citation spec="XQUPDATE" section-number="1.4.4" section-title="Q1" section-pointer="ns-q1"/>
           <state time="0">
            <query name="namespaces-q1" date="2006-08-05"/>
            <input-file role="principal-data" variable="grant">grant</input-file>
           </state>
           <state time="1">
            <query name="namespaces-q1-test" date="2007-02-01"/>
            <input-file role="principal-data" variable="grant">grant</input-file>
            <output-file role="principal" compare="Fragment">namespaces-q1-results.xml</output-file>
           </state>
          </test-case>   
        </test-group>
        <test-group name="PartsUpdates">
         <GroupInfo>
            <title>Use Cases "Parts" - modifying recursive documents</title>
            <description/>
         </GroupInfo>          
          <test-case  name="parts-q1" FilePath="UseCases/PartsUpdates/" scenario="standard" Creator="Update Task Force">
           <description>Parts Use case # 1</description>
           <spec-citation spec="XQUPDATE" section-number="1.5.2" section-title="Q1" section-pointer="use-case-parts-q1"/>
           <state time="0">
            <query name="parts-q1" date="2006-08-05"/>
            <input-file role="principal-data" variable="part-tree">part-tree</input-file>          
           </state>
           <state time="1">
            <query name="parts-q1-test" date="2007-02-01"/>
            <input-file role="principal-data" variable="part-tree">part-tree</input-file>            
            <output-file role="principal" compare="Fragment">parts-q1-results.xml</output-file>
           </state>
          </test-case>  
          <test-case  name="parts-q2" FilePath="UseCases/PartsUpdates/" scenario="standard" Creator="Update Task Force">
           <description>Parts Use case # 2</description>
           <spec-citation spec="XQUPDATE" section-number="1.5.3" section-title="Q2" section-pointer="use-case-parts-q2"/>
           <state time="0">
            <query name="parts-q2" date="2006-08-05"/>
            <input-file role="principal-data" variable="part-tree">part-tree</input-file>          
           </state>
           <state time="1">
            <query name="parts-q2-test" date="2007-02-01"/>
            <input-file role="principal-data" variable="part-tree">part-tree</input-file>            
            <output-file role="principal" compare="Fragment">parts-q2-results.xml</output-file>
           </state>
          </test-case>  
          <test-case  name="parts-q3-1" FilePath="UseCases/PartsUpdates/" scenario="standard" Creator="Update Task Force">
           <description>Parts Use case # 3</description>
           <spec-citation spec="XQUPDATE" section-number="1.5.4" section-title="Q3" section-pointer="use-case-parts-q3"/>
           <state time="0">
            <query name="parts-q3-1" date="2006-08-05"/>
            <input-file role="principal-data" variable="part-tree">part-tree</input-file>    
            <input-file role="principal-data" variable="part-list">part-list</input-file>                   
           </state>
           <state time="1">
            <query name="parts-q3-test" date="2007-02-01"/>
            <input-file role="principal-data" variable="part-list">part-list</input-file>            
            <output-file role="principal" compare="Fragment">parts-q3-results.xml</output-file>
           </state>
          </test-case>  
          <test-case  name="parts-q3-2" FilePath="UseCases/PartsUpdates/" scenario="standard" Creator="Update Task Force">
           <description>Parts Use case # 3 (alternate solution)</description>
           <spec-citation spec="XQUPDATE" section-number="1.5.4" section-title="Q3" section-pointer="use-case-parts-q3"/>
           <state time="0">
            <query name="parts-q3-2" date="2006-08-05"/>
            <input-file role="principal-data" variable="part-list">part-list</input-file>    
            <input-file role="principal-data" variable="part-tree">part-tree</input-file>                   
           </state>
           <state time="1">
            <query name="parts-q3-test" date="2007-02-01"/>
            <input-file role="principal-data" variable="part-list">part-list</input-file>            
            <output-file role="principal" compare="Fragment">parts-q3-results.xml</output-file>
           </state>
          </test-case>      
          <test-case  name="parts-q4-1" FilePath="UseCases/PartsUpdates/" scenario="standard" Creator="Update Task Force">
           <description>Parts Use case # 4</description>
           <spec-citation spec="XQUPDATE" section-number="1.5.5" section-title="Q4" section-pointer="use-case-parts-q4"/>
           <state time="0">
            <query name="parts-q4-1" date="2006-08-05"/>    
            <input-file role="principal-data" variable="part-tree">part-tree</input-file>                   
           </state>
           <state time="1">
            <query name="parts-q4-test" date="2007-02-01"/>
            <input-file role="principal-data" variable="part-tree">part-tree</input-file>            
            <output-file role="principal" compare="Fragment">parts-q4-results.xml</output-file>
           </state>
          </test-case>   
          <test-case  name="parts-q4-2" FilePath="UseCases/PartsUpdates/" scenario="standard" Creator="Update Task Force">
           <description>Parts Use case # 4.  Alternate solution.</description>
           <spec-citation spec="XQUPDATE" section-number="1.5.5" section-title="Q4" section-pointer="use-case-parts-q4"/>
           <state time="0">
            <query name="parts-q4-2" date="2006-08-05"/>    
            <input-file role="principal-data" variable="part-tree">part-tree</input-file>                   
           </state>
           <state time="1">
            <query name="parts-q4-test" date="2007-02-01"/>
            <input-file role="principal-data" variable="part-tree">part-tree</input-file>            
            <output-file role="principal" compare="Fragment">parts-q4-results.xml</output-file>
           </state>
          </test-case>             
          <test-case  name="parts-q6" FilePath="UseCases/PartsUpdates/" scenario="standard" Creator="Update Task Force">
           <description>Parts Use case # 6</description>
           <spec-citation spec="XQUPDATE" section-number="1.5.6" section-title="Q6" section-pointer="use-case-parts-q6"/>
           <state time="0">
            <query name="parts-q6" date="2006-08-05"/>    
            <input-file role="principal-data" variable="part-tree">part-tree</input-file>                   
           </state>
           <state time="1">
            <query name="parts-q6-test" date="2007-02-01"/>
            <input-file role="principal-data" variable="part-tree">part-tree</input-file>            
            <output-file role="principal" compare="Fragment">parts-q6-results.xml</output-file>
           </state>
          </test-case>
        </test-group>
        <test-group name="NilUpdates">
         <GroupInfo>
            <title>Use Cases "Nil"</title>
            <description/>
         </GroupInfo>           
          <test-case  name="nil-q1" FilePath="UseCases/NilUpdates/" scenario="standard" Creator="Update Task Force">
           <description>Nil Use case # 1</description>
           <spec-citation spec="XQUPDATE" section-number="1.6.3" section-title="Q1" section-pointer="use-case-nil-q1"/>
           <state time="0">
            <query name="nil-q1" date="2006-08-05"/>    
            <input-file role="principal-data" variable="employees">employees</input-file>                          
            <output-file role="principal" compare="Fragment">nil-q1-results.xml</output-file>
           </state>
          </test-case>           
      </test-group>
    </test-group>
    <test-group name="InsertExpressions">
        <GroupInfo>
            <title>Insert Expressions</title>
            <description/>
         </GroupInfo>
           <test-case  name="id-insert-expr-01" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a simple insert expression with "after" clause only.  Inserts an element.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/> 
             <state time="0">             
               <query name="id-insert-expr-01" date="2006-11-13"/>                     
               <input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">    
               <query name="id-insert-expr-01-test" date="2007-02-08"/>    
               <input-file role="principal-data" variable="input-context">works-mod</input-file>  
               <output-file role="principal" compare="Fragment">id-insert-expr-01.xml</output-file>                                               
             </state>             
           </test-case> 
           <test-case  name="id-insert-expr-02" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a simple insert expression with "after" clause only.  Inserts an element.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/> 
             <state time="0">
               <query name="id-insert-expr-02" date="2007-06-04"/>
               <input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1"> 
               <query name="id-insert-expr-02-test" date="2006-11-13"/>    
               <input-file role="principal-data" variable="input-context">works-mod</input-file>     
               <output-file role="principal" compare="Fragment">id-insert-expr-02.xml</output-file>                                     
             </state>             
           </test-case>      
           <test-case  name="id-insert-expr-03" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a simple insert expression with "as first" and "into" clauses.  Inserts an element.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">             
               <query name="id-insert-expr-03" date="2007-06-04"/>                     
               <input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
               <query name="id-insert-expr-03-test" date="2007-06-04"/>     
               <input-file role="principal-data" variable="input-context">works-mod</input-file>                          
               <output-file role="principal" compare="Fragment">id-insert-expr-03.xml</output-file>
             </state>
           </test-case>    
           <test-case  name="id-insert-expr-04" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a simple insert expression with "as last" and "into" clauses.  Inserts an element.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0"> 
               <query name="id-insert-expr-04" date="2007-06-04"/>                     
               <input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
               <query name="id-insert-expr-04-test" date="2007-06-04"/>    
               <input-file role="principal-data" variable="input-context">works-mod</input-file>                             
               <output-file role="principal" compare="Fragment">id-insert-expr-04.xml</output-file>
             </state>
           </test-case>  
           <test-case  name="id-insert-expr-05" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a simple insert expression with "into" clause only.  Inserts an element.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">              
               <query name="id-insert-expr-05" date="2007-06-04"/>                     
               <input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1"> 
               <query name="id-insert-expr-05-test" date="2007-06-04"/>    
               <input-file role="principal-data" variable="input-context">works-mod</input-file>                            
               <output-file role="principal" compare="Fragment">id-insert-expr-05.xml</output-file>
             </state>
           </test-case>
           <test-case  name="id-insert-expr-06" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
            <description>Evaluates a simple insert expression with "after" clause only.  Inserts an attribute.</description>
            <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">             
               <query name="id-insert-expr-06" date="2007-06-04"/>                     
               <input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">    
               <query name="id-insert-expr-06-test" date="2007-06-04"/>              
               <input-file role="principal-data" variable="input-context">works-mod</input-file>                         
               <output-file role="principal" compare="Fragment">id-insert-expr-06.xml</output-file>
             </state>
           </test-case> 
           <test-case  name="id-insert-expr-07" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a simple insert expression with "before" clause only.  Inserts an attribute.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">               
               <query name="id-insert-expr-07" date="2007-06-04"/>                     
               <input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
               <query name="id-insert-expr-07-test" date="2007-06-04"/>              
               <input-file role="principal-data" variable="input-context">works-mod</input-file> 
               <output-file role="principal" compare="Fragment">id-insert-expr-07.xml</output-file>
             </state>
           </test-case>     
           <test-case  name="id-insert-expr-08" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
            <description>Evaluates a simple insert expression with "as first" and "into" clauses.  Inserts an attribute.</description>
            <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
            <state time="0">              
              <query name="id-insert-expr-08" date="2007-06-04"/>                     
              <input-file role="principal-data" variable="input-context">works-mod</input-file>
            </state>
            <state time="1"> 
              <query name="id-insert-expr-08-test" date="2007-06-04"/>              
              <input-file role="principal-data" variable="input-context">works-mod</input-file>                        
              <output-file role="principal" compare="Fragment">id-insert-expr-08.xml</output-file>
            </state>
           </test-case>          
           <test-case  name="id-insert-expr-09" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a simple insert expression with "as last" and "into" clauses.  Inserts an attribute.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">              
               <query name="id-insert-expr-09" date="2007-06-04"/>                     
               <input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>               
             <state time="1">    
               <query name="id-insert-expr-09-test" date="2007-06-04"/>              
               <input-file role="principal-data" variable="input-context">works-mod</input-file>                       
               <output-file role="principal" compare="Fragment">id-insert-expr-09.xml</output-file>
             </state>               
           </test-case>
           <test-case  name="id-insert-expr-010" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a simple insert expression with "into" clause only.  Inserts an attribute.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">              
               <query name="id-insert-expr-010" date="2007-06-04"/>                     
               <input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
               <query name="id-insert-expr-010-test" date="2007-06-04"/>      
               <input-file role="principal-data" variable="input-context">works-mod</input-file>
               <output-file role="principal" compare="Fragment">id-insert-expr-010.xml</output-file>
             </state>              
           </test-case>  
           <test-case  name="id-insert-expr-011" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a simple insert expression with "after" clause only.  Inserts a comment.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">             
               <query name="id-insert-expr-011" date="2007-06-04"/>                     
               <input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">       
               <query name="id-insert-expr-011-test" date="2007-06-04"/>  
               <input-file role="principal-data" variable="input-context">works-mod</input-file>                                 
               <output-file role="principal" compare="Fragment">id-insert-expr-011.xml</output-file>
             </state>
           </test-case>     
           <test-case  name="id-insert-expr-012" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a simple insert expression with "before" clause only.  Inserts a comment.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">              
               <query name="id-insert-expr-012" date="2007-06-04"/>                     
               <input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
               <query name="id-insert-expr-012-test" date="2007-06-04"/>  
               <input-file role="principal-data" variable="input-context">works-mod</input-file>                          
               <output-file role="principal" compare="Fragment">id-insert-expr-012.xml</output-file>
             </state>              
           </test-case>         
           <test-case  name="id-insert-expr-013" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a simple insert expression with "as first" and "into" clauses.  Inserts a comment.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">              
               <query name="id-insert-expr-013" date="2007-06-04"/>                     
               <input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">    
               <query name="id-insert-expr-013-test" date="2007-06-04"/>  
               <input-file role="principal-data" variable="input-context">works-mod</input-file>                       
               <output-file role="principal" compare="Fragment">id-insert-expr-013.xml</output-file>
             </state>
           </test-case> 
           <test-case  name="id-insert-expr-014" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a simple insert expression with "as first" and "into" clauses.  Inserts a comment.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">              
               <query name="id-insert-expr-014" date="2007-06-04"/>                                    
               <input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">                
               <query name="id-insert-expr-014-test" date="2007-06-04"/>  
               <input-file role="principal-data" variable="input-context">works-mod</input-file>             
               <output-file role="principal" compare="Fragment">id-insert-expr-014.xml</output-file>
             </state>
           </test-case>   
           <test-case  name="id-insert-expr-015" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a simple insert expression with "into" clause only.  Inserts a comment.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">              
               <query name="id-insert-expr-015" date="2007-06-04"/>                     
               <input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
               <query name="id-insert-expr-015-test" date="2007-06-04"/>
               <input-file role="principal-data" variable="input-context">works-mod</input-file>             
               <output-file role="principal" compare="Fragment">id-insert-expr-015.xml</output-file>
             </state>
           </test-case> 
           <test-case  name="id-insert-expr-016" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a simple insert expression with "before" clause only.  Inserts an element into a directly constructed element node.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">             
               <query name="id-insert-expr-016" date="2007-06-04"/>                     
               <input-file role="principal-data" variable="input-context">works-mod</input-file> 
             </state>
             <state time="1">
               <query name="id-insert-expr-016-test" date="2007-06-04"/>                     
               <input-file role="principal-data" variable="input-context">works-mod</input-file>
               <output-file role="principal" compare="Fragment">id-insert-expr-016.xml</output-file>
             </state>             
           </test-case> 
           <test-case  name="id-insert-expr-017" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a simple insert expression with "after" clause only.  Inserts an element into a directly constructed element node.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">               
               <query name="id-insert-expr-017" date="2007-06-04"/>                     
               <input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
               <query name="id-insert-expr-017-test" date="2007-06-04"/>                     
               <input-file role="principal-data" variable="input-context">works-mod</input-file>
               <output-file role="principal" compare="Fragment">id-insert-expr-017.xml</output-file>
             </state>
           </test-case>  
           <test-case  name="id-insert-expr-018" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a simple insert expression with "as first" and "into" clauses.  Inserts an element into a directly constructed element node.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0"> 
               <query name="id-insert-expr-018" date="2007-06-04"/>                     
               <input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
               <query name="id-insert-expr-018-test" date="2007-06-04"/> 
               <input-file role="principal-data" variable="input-context">works-mod</input-file>
               <output-file role="principal" compare="Fragment">id-insert-expr-018.xml</output-file>
             </state>
           </test-case>    
           <test-case  name="id-insert-expr-019" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a simple insert expression with "as last" and "into" clauses.  Inserts an element into a directly constructed element node.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">               
               <query name="id-insert-expr-019" date="2007-06-04"/>                     
               <input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
               <query name="id-insert-expr-019-test" date="2007-06-04"/>                     
               <input-file role="principal-data" variable="input-context">works-mod</input-file>
               <output-file role="principal" compare="Fragment">id-insert-expr-019.xml</output-file>
             </state>
           </test-case>     
           <test-case  name="id-insert-expr-020" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
            <description>Evaluates a simple insert expression with "into" clause only.  Inserts an element into a directly constructed element node.</description>
            <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">               
               <query name="id-insert-expr-020" date="2007-06-04"/>                     
               <input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
               <query name="id-insert-expr-020-test" date="2007-06-04"/>                     
               <input-file role="principal-data" variable="input-context">works-mod</input-file>
               <output-file role="principal" compare="Fragment">id-insert-expr-020.xml</output-file>
             </state>
           </test-case>   
           <test-case  name="id-insert-expr-021" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a simple insert expression with "after" only. Insert a sequence of element nodes into a directly constructed element node.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">              
               <query name="id-insert-expr-021" date="2007-06-04"/>                     
               <input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
               <query name="id-insert-expr-021-test" date="2007-06-04"/>                     
               <input-file role="principal-data" variable="input-context">works-mod</input-file>
               <output-file role="principal" compare="Fragment">id-insert-expr-021.xml</output-file>
             </state>             
           </test-case>   
           <test-case  name="id-insert-expr-022" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of simple insert expression that uses "into" clause only to insert a sequence of element nodes into into an XML data source.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">              
               <query name="id-insert-expr-022" date="2007-06-04"/>                     
               <input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
               <query name="id-insert-expr-022-test" date="2007-06-04"/>                     
               <input-file role="principal-data" variable="input-context">works-mod</input-file>
               <output-file role="principal" compare="Fragment">id-insert-expr-022.xml</output-file>
             </state>             
           </test-case>              
           <test-case  name="id-insert-expr-023" FilePath="InsertExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a simple insert expression where source expression is an updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">              
               <query name="id-insert-expr-023" date="2007-06-04"/>                     
               <input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>               
             </state>
           </test-case>  
           <test-case  name="id-insert-expr-024" FilePath="InsertExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a simple insert expression where target expression is an updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">
             	<query name="id-insert-expr-024" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>
             </state>
           </test-case>    
           <test-case  name="id-insert-expr-025" FilePath="InsertExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a simple insert expression where both source and target expressions are updating expressions.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/> 
             <state time="0">
             	<query name="id-insert-expr-025" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>             	
             </state>
           </test-case>          
           <test-case  name="id-insert-expr-026" FilePath="InsertExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression where the source sequence have an attribute node following an element node.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/> 
             <state time="0">
             	<query name="id-insert-expr-026" date="2007-06-04"/> 
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUTY0004</expected-error>             	
             </state>
           </test-case>  
           <test-case  name="id-insert-expr-027" FilePath="InsertExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression where the target expression is a sequence of nodes.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">
             	<query name="id-insert-expr-027" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUTY0005</expected-error>             	
             </state>
           </test-case>        
           <test-case  name="id-insert-expr-028" FilePath="InsertExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression where the target expression is the empty sequence.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">
             	<query name="id-insert-expr-028" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUDY0027</expected-error>             	
             </state>
           </test-case>  
           <test-case  name="id-insert-expr-029" FilePath="InsertExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression where the target expression evaluates to a number.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">
             	<query name="id-insert-expr-029" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUTY0005</expected-error>             	
             </state>
           </test-case>  
           <test-case  name="id-insert-expr-030" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression where the source expression evaluates to a number.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">
             	<query name="id-insert-expr-030" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             </state>
             <state time="1">
             	<query name="id-insert-expr-030-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<output-file role="principal" compare="Fragment">id-insert-expr-030.xml</output-file>
             </state>
           </test-case> 
           <test-case  name="id-insert-expr-031" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression where the target expression is a complex expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">
             	<query name="id-insert-expr-031" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-insert-expr-031-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-insert-expr-031.xml</output-file>
             </state>
           </test-case>  
           <test-case  name="id-insert-expr-032" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of insert expression where a sequence of attributes is inserted as first.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">
             	<query name="id-insert-expr-032" date="2007-07-26"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-insert-expr-032-test" date="2007-07-26"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-insert-expr-032.xml</output-file>
             </state>
           </test-case>   
           <test-case  name="id-insert-expr-033" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of insert expression where a sequence of attributes is inserted as last.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">
             	<query name="id-insert-expr-033" date="2007-07-26"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-insert-expr-033-test" date="2007-07-26"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-insert-expr-033.xml</output-file>
             </state>
           </test-case>     
           <test-case  name="id-insert-expr-034" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of insert expression where a sequence of nodes is inserted as first.  Make sure order is preserved.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">
             	<query name="id-insert-expr-034" date="2007-07-26"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-insert-expr-034-test" date="2007-07-26"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-insert-expr-034.xml</output-file>
             </state>
           </test-case>   
           <test-case  name="id-insert-expr-035" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of insert expression where a sequence of nodes is inserted as last.  Make sure order is preserved.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">
             	<query name="id-insert-expr-035" date="2007-07-26"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-insert-expr-035-test" date="2007-07-26"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-insert-expr-035.xml</output-file>
             </state>
           </test-case>   
           <test-case  name="id-insert-expr-036" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of insert expression where a sequence of nodes is inserted using "before" clause.  Make sure order is preserved.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">
             	<query name="id-insert-expr-036" date="2007-07-26"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-insert-expr-036-test" date="2007-07-26"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-insert-expr-036.xml</output-file>
             </state>
           </test-case>  
           <test-case  name="id-insert-expr-037" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of insert expression where a sequence of nodes is inserted using "after" clause.  Make sure order is preserved.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">
             	<query name="id-insert-expr-037" date="2007-07-26"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-insert-expr-037-test" date="2007-07-26"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-insert-expr-037.xml</output-file>
             </state>
           </test-case> 
           <test-case  name="id-insert-expr-038" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of insert expression where a sequence of Comment nodes are inserted using "before" clause.  Make sure order is preserved.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">
             	<query name="id-insert-expr-038" date="2007-07-26"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-insert-expr-038-test" date="2007-07-26"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-insert-expr-038.xml</output-file>
             </state>
           </test-case> 
           <test-case  name="id-insert-expr-039" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of insert expression where a sequence of Comment nodes are inserted using "after" clause.  Make sure order is preserved.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">
             	<query name="id-insert-expr-039" date="2007-07-26"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-insert-expr-039-test" date="2007-07-26"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-insert-expr-039.xml</output-file>
             </state>
           </test-case>   
           <test-case  name="id-insert-expr-040" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of insert expression where a two groups of element nodes is inserted as using "after" clause. Make sure order is mantained within a groups.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">
             	<query name="id-insert-expr-040" date="2007-07-26"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-insert-expr-040-test" date="2007-07-26"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-insert-expr-040.xml</output-file>
                <output-file role="principal" compare="Fragment">id-insert-expr-040-alt.xml</output-file>             	
             </state>
           </test-case>  
           <test-case  name="id-insert-expr-041" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of insert expression where a two groups of element nodes is inserted as using "before" clause. Make sure order is mantained within a groups.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">
             	<query name="id-insert-expr-041" date="2007-07-26"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-insert-expr-041-test" date="2007-07-26"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-insert-expr-041.xml</output-file>
                <output-file role="principal" compare="Fragment">id-insert-expr-041-alt.xml</output-file>             	
             </state>
           </test-case> 
           <test-case  name="id-insert-expr-042" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of insert expression where two groups of element nodes are inserted as using "before" and "after" clauses respectively. Make sure order is mantained within groups.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">
             	<query name="id-insert-expr-042" date="2007-07-27"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-insert-expr-042-test" date="2007-07-27"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-insert-expr-042.xml</output-file>
             </state>
           </test-case> 
           <test-case  name="id-insert-expr-043" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of insert expression where two groups of element nodes are inserted as using "after" and "before" clauses respectively. Make sure order is mantained within groups.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">
             	<query name="id-insert-expr-043" date="2007-07-27"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-insert-expr-043-test" date="2007-07-27"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-insert-expr-043.xml</output-file>
             </state>
           </test-case>    
           <test-case  name="id-insert-expr-044" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of insert expression, where the source expression is a transform expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">
             	<query name="id-insert-expr-044" date="2007-08-07"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-insert-expr-044-test" date="2007-08-07"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-insert-expr-044.xml</output-file>
             </state>
           </test-case>
           <test-case  name="id-insert-expr-045" FilePath="InsertExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluation of insert expression, where the before clause is used and the result is a document node.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">
             	<query name="id-insert-expr-045" date="2007-08-07"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUTY0006</expected-error>             	
             </state>
           </test-case>
           <test-case  name="id-insert-expr-046" FilePath="InsertExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluation of insert expression, where the after clause is used and the result is a document node.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">
             	<query name="id-insert-expr-046" date="2007-08-07"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUTY0006</expected-error>             	
             </state>
           </test-case>  
           <test-case  name="id-insert-expr-047" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of insert expression, where the target is a comment node and usage of after clause.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">
             	<query name="id-insert-expr-047" date="2007-08-07"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             </state>             	
             <state time="1">  
             	<query name="id-insert-expr-047-test" date="2007-09-26"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>                        	
             	<output-file role="principal" compare="Fragment">id-insert-expr-047.xml</output-file>           	
             </state>
           </test-case>    
           <test-case  name="id-insert-expr-048" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of insert expression, where the target is a comment node and usage of before clause.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">
             	<query name="id-insert-expr-048" date="2007-08-07"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             </state>             	
             <state time="1">  
             	<query name="id-insert-expr-048-test" date="2007-09-26"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>                        	
             	<output-file role="principal" compare="Fragment">id-insert-expr-048.xml</output-file>           	
             </state>
           </test-case>
           <test-case  name="id-insert-expr-049" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of insert expression, where two nodes are inserted into the same node using the "as first" clause.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">
             	<query name="id-insert-expr-049" date="2007-08-07"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-insert-expr-049-test" date="2007-08-07"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-insert-expr-049.xml</output-file>
             	<output-file role="principal" compare="Fragment">id-insert-expr-049-alt.xml</output-file>             	
             </state>
           </test-case> 
           <test-case  name="id-insert-expr-050" FilePath="InsertExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of insert expression, where two nodes are inserted into the same node using the "as last" clause.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">
             	<query name="id-insert-expr-050" date="2007-08-07"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-insert-expr-050-test" date="2007-08-07"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-insert-expr-050.xml</output-file>
             	<output-file role="principal" compare="Fragment">id-insert-expr-050-alt.xml</output-file>             	
             </state>
           </test-case>                                                  
    </test-group>
    <test-group name="DeleteExpressions">
        <GroupInfo>
            <title>Delete Expressions</title>
            <description/>
         </GroupInfo>
           <test-case  name="id-delete-expr-01" FilePath="DeleteExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>A delete expression that removes an element from a directly constructed element node.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <state time="0">	
             	<query name="id-delete-expr-01" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-delete-expr-01-test" date="2007-06-04"/>             	
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-delete-expr-01.xml</output-file>
             </state>
           </test-case>   
           <test-case  name="id-delete-expr-02" FilePath="DeleteExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>A delete expression that removes an attribute from a directly constructed element node.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/>  
             <state time="0">
             	<query name="id-delete-expr-02" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-delete-expr-02-test" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>             
             	<output-file role="principal" compare="Fragment">id-delete-expr-02.xml</output-file>   
             </state>
           </test-case> 
           <test-case  name="id-delete-expr-03" FilePath="DeleteExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>A delete expression that removes a comment node from a directly constructed element node.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/>  
             <state time="0">             
             	<query name="id-delete-expr-03" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-delete-expr-03-test" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-delete-expr-03.xml</output-file>   
             </state>
           </test-case>  
           <test-case  name="id-delete-expr-04" FilePath="DeleteExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>A delete expression that removes multiple element nodes from an XML File.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <state time="0">                          
               <query name="id-delete-expr-04" date="2007-06-04"/>                     
               <input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1"> 
               <query name="id-delete-expr-04-test" date="2007-06-04"/>                     
               <input-file role="principal-data" variable="input-context">works-mod</input-file>                          
               <output-file role="principal" compare="Fragment">id-delete-expr-04.xml</output-file>   
             </state>
           </test-case> 
           <test-case  name="id-delete-expr-05" FilePath="DeleteExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>A delete expression that removes a sequence of element nodes from directly constructed element nodes.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/>  
             <state time="0">	
             	<query name="id-delete-expr-05" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-delete-expr-05-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Text">id-delete-expr-05.txt</output-file>   
             </state>
           </test-case>  
           <test-case  name="id-delete-expr-06" FilePath="DeleteExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>A delete expression where the target expression is an updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <state time="0">
             	<query name="id-delete-expr-06" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>   
           <test-case  name="id-delete-expr-07" FilePath="DeleteExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>A delete expression where the target expression is a mathematical expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/>
             <state time="0">
             	<query name="id-delete-expr-07" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUTY0007</expected-error>
             </state>
           </test-case>   
           <test-case  name="id-delete-expr-08" FilePath="DeleteExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>A delete expression where the target expression results in a sequence of zero nodes.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <state time="0">
             	<query name="id-delete-expr-08" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-delete-expr-08-test" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-delete-expr-08.xml</output-file>
             </state>
           </test-case>       
           <test-case  name="id-delete-expr-09" FilePath="DeleteExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>A delete expression where the target expression is set to "()".</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <state time="0">
             	<query name="id-delete-expr-09" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-delete-expr-09-test" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Text">id-delete-expr-09.txt</output-file>
             </state>
           </test-case>    
           <test-case  name="id-delete-expr-010" FilePath="DeleteExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>A delete expression where the target expression is a complex one.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <state time="0">
             	<query name="id-delete-expr-010" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-delete-expr-010-test" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-delete-expr-010.xml</output-file>
             </state> 
           </test-case>   
           <test-case  name="id-delete-expr-011" FilePath="DeleteExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>A delete expression where the target expression results in a sequence of integers.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/>
             <state time="0">
             	<query name="id-delete-expr-011" date="2007-08-02"/> 
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUTY0007</expected-error>               	       	
             </state>
           </test-case>  
           <test-case  name="id-delete-expr-012" FilePath="DeleteExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>A delete expression with multiple delete states.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <state time="0">
             	<query name="id-delete-expr-012" date="2007-08-31"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-delete-expr-012-test" date="2007-08-31"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Text">id-delete-expr-012.txt</output-file>
             </state> 
             <state time="2">
             	<query name="id-delete-expr-012-1" date="2007-08-31"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="3">
             	<query name="id-delete-expr-012-1-test" date="2007-08-31"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Text">id-delete-expr-012-1.txt</output-file>
             </state>              
           </test-case>                           
    </test-group>  
    <test-group name="ReplaceExpressions">
        <GroupInfo>
            <title>Replace Expressions</title>
            <description/>
         </GroupInfo>
           <test-case  name="id-replace-expr-01" FilePath="ReplaceExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression, which replaces an element node.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.1" section-title="Replacing a Node" section-pointer="id-replacing-node"/>
             <state time="0">
             	<query name="id-replace-expr-01" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-replace-expr-01-test" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-replace-expr-01.xml</output-file>
             </state>
           </test-case>  
           <test-case  name="id-replace-expr-02" FilePath="ReplaceExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression, which replaces an attribute node.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/> 
             <spec-citation spec="XQUPDATE" section-number="2.4.3.1" section-title="Replacing a Node" section-pointer="id-replacing-node"/>
             <state time="0">
             	<query name="id-replace-expr-02" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-replace-expr-02-test" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-replace-expr-02.xml</output-file>
             </state>             	
           </test-case>     
           <test-case  name="id-replace-expr-03" FilePath="ReplaceExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression that replaces a comment node.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.1" section-title="Replacing a Node" section-pointer="id-replacing-node"/>
             <state time="0">
             	<query name="id-replace-expr-03" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-replace-expr-03-test" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-replace-expr-03.xml</output-file>
             </state>
           </test-case> 
           <test-case  name="id-replace-expr-04" FilePath="ReplaceExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression that replaces Processing Instruction node.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.1" section-title="Replacing a Node" section-pointer="id-replacing-node"/>
             <state time="0">
             	<query name="id-replace-expr-04" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-replace-expr-04-test" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-replace-expr-04.xml</output-file>
             </state>
           </test-case>    
           <test-case  name="id-replace-expr-05" FilePath="ReplaceExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression, which replaces an element node and usage of "value of" keyword.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>
             <state time="0">
             	<query name="id-replace-expr-05" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-replace-expr-05-test" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-replace-expr-05.xml</output-file>
             </state>
           </test-case>   
           <test-case  name="id-replace-expr-06" FilePath="ReplaceExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression, which replaces an attribute node and usage of "value of" keyword.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>
             <state time="0">
             	<query name="id-replace-expr-06" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-replace-expr-06-test" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-replace-expr-06.xml</output-file>
             </state>
           </test-case>     
		   <test-case  name="id-replace-expr-07" FilePath="ReplaceExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression, which replaces a comment node and usage of "value of" keyword.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.1" section-title="Replacing a Node" section-pointer="id-replacing-node"/>
             <state time="0">
             	<query name="id-replace-expr-07" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-replace-expr-07-test" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-replace-expr-07.xml</output-file>
             </state>
           </test-case>  
           <test-case  name="id-replace-expr-08" FilePath="ReplaceExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression, which replaces a Processing Instruction node and usage of "value of" keyword.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.1" section-title="Replacing a Node" section-pointer="id-replacing-node"/>
             <state time="0">
             	<query name="id-replace-expr-08" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-replace-expr-08-test" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-replace-expr-08.xml</output-file>
             </state>
           </test-case>  
           <test-case  name="id-replace-expr-09" FilePath="ReplaceExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression, which replaces an element node and usage of "value of" keyword.  It uses an arithmetic expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.1" section-title="Replacing a Node" section-pointer="id-replacing-node"/>
             <state time="0">
             	<query name="id-replace-expr-09" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-replace-expr-09-test" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-replace-expr-09.xml</output-file>
             </state>
           </test-case>   
           <test-case  name="id-replace-expr-010" FilePath="ReplaceExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression, which replaces an element node with a sequence of zero nodes.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.1" section-title="Replacing a Node" section-pointer="id-replacing-node"/>             
             <state time="0">
             	<query name="id-replace-expr-010" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             </state>
             <state time="1">
             	<query name="id-replace-expr-010-test" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<output-file role="principal" compare="Fragment">id-replace-expr-010.xml</output-file>
             </state>
           </test-case>  
           <test-case  name="id-replace-expr-011" FilePath="ReplaceExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression, where expression following the "with" clause is an updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.1" section-title="Replacing a Node" section-pointer="id-replacing-node"/>             
             <state time="0">
             	<query name="id-replace-expr-011" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>             	
             </state>
           </test-case>
           <test-case  name="id-replace-expr-012" FilePath="ReplaceExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression, where the target expression is an updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.1" section-title="Replacing a Node" section-pointer="id-replacing-node"/>
             <state time="0">
             	<query name="id-replace-expr-012" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>
             </state>
           </test-case>    
           <test-case  name="id-replace-expr-013" FilePath="ReplaceExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression, where the target expression results in more than one node.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.1" section-title="Replacing a Node" section-pointer="id-replacing-node"/>
             <state time="0">
             	<query name="id-replace-expr-013" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUTY0008</expected-error>             	
             </state>
           </test-case>       
           <test-case  name="id-replace-expr-014" FilePath="ReplaceExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression, where the target expression results in a single node with no parent property.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.1" section-title="Replacing a Node" section-pointer="id-replacing-node"/>
             <state time="0">
             	<query name="id-replace-expr-014" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUDY0009</expected-error>             	
             </state>
           </test-case>    
           <test-case  name="id-replace-expr-015" FilePath="ReplaceExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression, where the target is a document node.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.1" section-title="Replacing a Node" section-pointer="id-replacing-node"/>
             <state time="0">
             	<query name="id-replace-expr-015" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUTY0008</expected-error>             	
             </state>
           </test-case>  
           <test-case  name="id-replace-expr-016" FilePath="ReplaceExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression, where an attempt is made to replace an attribute node with an element node.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.1" section-title="Replacing a Node" section-pointer="id-replacing-node"/>
             <state time="0">
             	<query name="id-replace-expr-016" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUTY0011</expected-error>             	
             </state>
           </test-case>  
           <test-case  name="id-replace-expr-017" FilePath="ReplaceExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression, where expression following the "with" clause is an updating expression and usage of "value of" keyword.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-replace-expr-017" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>             	
             </state>
           </test-case>     
           <test-case  name="id-replace-expr-018" FilePath="ReplaceExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression, where the target expression is an updating expression and usage of the "value of" keyword.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-replace-expr-018" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>             	
             </state>
           </test-case>
           <test-case  name="id-replace-expr-019" FilePath="ReplaceExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression, where the target expression results into more than one node and usage of the "value of" keyword.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-replace-expr-019" date="2007-06-04"/> 
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUTY0008</expected-error>             	
             </state>
           </test-case> 
           <test-case  name="id-replace-expr-020" FilePath="ReplaceExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression, where the target is a document node and usage of the "value of" keyword.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-replace-expr-020" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUTY0008</expected-error>
             	<expected-error>XUDY0009</expected-error>
             </state>
           </test-case>         
           <test-case  name="id-replace-expr-021" FilePath="ReplaceExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression, used to replace an attribute node's value with an element node and usage of the "value of" clause.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-replace-expr-021" date="2007-06-04"/>  
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>             	
             </state>
             <state time="1">
             	<query name="id-replace-expr-021-test" date="2007-10-05"/>                     
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<output-file role="principal" compare="Fragment">id-replace-expr-021.xml</output-file>             
             </state>             
           </test-case>   
           <test-case  name="id-replace-expr-022" FilePath="ReplaceExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluation of a replace expression where an Element node value is replaced with an attribute node.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-replace-expr-022" date="2007-08-01"/>  
             	<input-file role="principal-data" variable="input-context">works-mod</input-file> 
             	<expected-error>XUTY0010</expected-error>               	  	
             </state>          
           </test-case>  
           <test-case  name="id-replace-expr-023" FilePath="ReplaceExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description> Evaluation of a replace expression, where the target node is an attribute and the replacement list is not exclusively attribute nodes.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-replace-expr-023" date="2007-08-01"/>  
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUTY0011</expected-error>               	
             </state>
           </test-case>                                       
           <test-case  name="id-replace-expr-024" FilePath="ReplaceExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression with value of clause, where the target is a comment node and replacement string contains two adjacents hypens.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-replace-expr-024" date="2007-08-02"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XQDY0072</expected-error>             	
             </state>
           </test-case>  
           <test-case  name="id-replace-expr-025" FilePath="ReplaceExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression with value of clause, where the target is a PI node and replacement string contains "?>".</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-replace-expr-025" date="2007-08-02"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XQDY0026</expected-error>             	
             </state>
           </test-case>  
           <test-case  name="id-replace-expr-026" FilePath="ReplaceExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression with value of clause, where the target expression results in and empty sequence.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-replace-expr-026" date="2007-08-02"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUDY0027</expected-error>              	
             </state>
           </test-case>  
           <test-case  name="id-replace-expr-027" FilePath="ReplaceExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression with value of clause, where the target expression is set to "()'</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-replace-expr-027" date="2007-08-02"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
              	<expected-error>XUDY0027</expected-error>              	
             </state>
           </test-case>                                          
    </test-group> 
    <test-group name="RenameExpressions">
        <GroupInfo>
            <title>Rename Expressions</title>
            <description/>
         </GroupInfo>
           <test-case  name="id-rename-expr-01" FilePath="RenameExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>A rename expression that renames an element from a directly constructed element node.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/>  
             <state time="0">
             	<query name="id-rename-expr-01" date="2007-06-04"/>   
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-rename-expr-01-test" date="2007-06-04"/>   
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-rename-expr-01.xml</output-file>   
             </state>
           </test-case> 
           <test-case  name="id-rename-expr-02" FilePath="RenameExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>A rename expression that renames an attribute from a directly constructed element node.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/>  
             <state time="0">
             	<query name="id-rename-expr-02" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-rename-expr-02-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-rename-expr-02.xml</output-file>   
             </state>
           </test-case> 
           <test-case  name="id-rename-expr-03" FilePath="RenameExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>A rename expression that renames a Processing Instruction.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <state time="0">
             	<query name="id-rename-expr-03" date="2007-06-04"/> 
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-rename-expr-03-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-rename-expr-03.xml</output-file>   
             </state>
           </test-case> 
           <test-case  name="id-rename-expr-04" FilePath="RenameExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>A rename expression that renames an element from an xml file.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/>  
             <state time="0">
             	<query name="id-rename-expr-04" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-rename-expr-04-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-rename-expr-04.xml</output-file>   
             </state>
           </test-case> 
           <test-case  name="id-rename-expr-05" FilePath="RenameExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>A rename expression that renames an attribute from an xml file.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <state time="0">
             	<query name="id-rename-expr-05" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-rename-expr-05-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-rename-expr-05.xml</output-file>   
             </state>
           </test-case>  
           <test-case  name="id-rename-expr-06" FilePath="RenameExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>A rename expression where the target expression is an updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <state time="0">
             	<query name="id-rename-expr-06" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>
             </state>
           </test-case>     
           <test-case  name="id-rename-expr-07" FilePath="RenameExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>A rename expression where the target expression results in a sequence of two nodes.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <state time="0">
             	<query name="id-rename-expr-07" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUTY0012</expected-error>
             </state>
           </test-case>    
           <test-case  name="id-rename-expr-08" FilePath="RenameExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>A rename expression where the target expression is the empty sequence.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <state time="0">
             	<query name="id-rename-expr-08" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUDY0027</expected-error>
             </state>
           </test-case> 
           <test-case  name="id-rename-expr-09" FilePath="RenameExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>A rename expression where the new name expression is the empty sequence.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/>  
             <state time="0">
             	<query name="id-rename-expr-09" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XPTY0004</expected-error>             	
             </state>
           </test-case>    
           <test-case  name="id-rename-expr-010" FilePath="RenameExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>A rename expression where the new name expression is an updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <state time="0">
             	<query name="id-rename-expr-010" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>
             	<expected-error>XPTY0004</expected-error>
             </state>
           </test-case>  
           <test-case  name="id-rename-expr-011" FilePath="RenameExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>A rename expression where the new name expression is build dynamically (fn:string-join function).</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/>  
             <state time="0">
             	<query name="id-rename-expr-011" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-rename-expr-011-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-rename-expr-011.xml</output-file>  
             </state>
           </test-case>
           <test-case  name="id-rename-expr-012" FilePath="RenameExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>A rename expression where the target expression evaluates to a number.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <state time="0">
             	<query name="id-rename-expr-012" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUTY0012</expected-error>
             </state>
           </test-case>    
           <test-case  name="id-rename-expr-013" FilePath="RenameExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>A rename expression where the newname expression evaluates to a number.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <state time="0">
             	<query name="id-rename-expr-013" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XPTY0004</expected-error>              	
             </state>
           </test-case>            
           <test-case  name="id-rename-expr-014" FilePath="RenameExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>A rename expression where the target expression is a complex one.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <state time="0">
             	<query name="id-rename-expr-014" date="2007-06-04"/> 
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-rename-expr-014-test" date="2007-06-04"/> 
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-rename-expr-014.xml</output-file>   
             </state>
           </test-case> 
           <test-case  name="id-rename-expr-015" FilePath="RenameExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>A rename expression where the target expression evaluates to a sequence of two attribute nodes.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <state time="0">
             	<query name="id-rename-expr-015" date="2007-08-02"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUTY0012</expected-error>              	
             </state>
           </test-case>  
           <test-case  name="id-rename-expr-016" FilePath="RenameExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>A rename expression, where the new name expression uses fn:concat function.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <state time="0">
             	<query name="id-rename-expr-016" date="2007-06-04"/> 
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-rename-expr-016-test" date="2007-06-04"/> 
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-rename-expr-016.xml</output-file>   
             </state>
           </test-case>  
           <test-case  name="id-rename-expr-017" FilePath="RenameExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>A rename expression, where the new name expression uses fn:substring function.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <state time="0">
             	<query name="id-rename-expr-017" date="2007-08-09"/> 
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-rename-expr-017-test" date="2007-06-04"/> 
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-rename-expr-017.xml</output-file>   
             </state>
           </test-case>   
           <test-case  name="id-rename-expr-018" FilePath="RenameExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>A rename expression, where the new name expression is a transform expression that returns a node. The fn:name function is used to retrieve the name of the node.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <state time="0">
             	<query name="id-rename-expr-018" date="2007-08-09"/> 
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-rename-expr-018-test" date="2007-06-04"/> 
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-rename-expr-018.xml</output-file>   
             </state>
           </test-case>
           <test-case  name="id-rename-expr-019" FilePath="RenameExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>A rename expression where the target expression is a comment node.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <state time="0">
             	<query name="id-rename-expr-019" date="2007-08-09"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUTY0012</expected-error>              	
             </state>
           </test-case>   
           <test-case  name="id-rename-expr-020" FilePath="RenameExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>A rename expression where the new name expression is a comment node.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <state time="0">
             	<query name="id-rename-expr-020" date="2007-08-09"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XQDY0074</expected-error>              	
             </state>
           </test-case>                     
    </test-group>        
    <test-group name="TransformExpressions">
        <GroupInfo>
            <title>Transform Expressions</title>
            <description/>
         </GroupInfo>
           <test-case  name="id-transform-expr-01" FilePath="TransformExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression with modify clause set to empty sequence.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>
             <state time="0">
             	<query name="id-transform-expr-01" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-transform-expr-01.xml</output-file> 
             </state>
           </test-case>
           <test-case  name="id-transform-expr-02" FilePath="TransformExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression with modify clause set to a delete expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <state time="0">
             	<query name="id-transform-expr-02" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-transform-expr-02.xml</output-file>
             </state>
           </test-case>    
           <test-case  name="id-transform-expr-03" FilePath="TransformExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression with modify clause set to a rename expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <state time="0">
             	<query name="id-transform-expr-03" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-transform-expr-03.xml</output-file>
             </state>
           </test-case>  
           <test-case  name="id-transform-expr-04" FilePath="TransformExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression with modify clause set to an insert expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <state time="0">
             	<query name="id-transform-expr-04" date="2007-06-04"/>                     
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>                    
             	<output-file role="principal" compare="Fragment">id-transform-expr-04.xml</output-file>
             </state>
           </test-case>  
           <test-case  name="id-transform-expr-05" FilePath="TransformExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression with modify clause set to a replace expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <state time="0">
             	<query name="id-transform-expr-05" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-transform-expr-05.xml</output-file>
             </state>
           </test-case>  
           <test-case  name="id-transform-expr-06" FilePath="TransformExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression where multiple element nodes are bounded.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <state time="0">
             	<query name="id-transform-expr-06" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-transform-expr-06.xml</output-file>
             	<expected-error>XUTY0013</expected-error>              	
             </state>
           </test-case> 
           <test-case  name="id-transform-expr-07" FilePath="TransformExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression where an attribute is transformed.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <state time="0">
             	<query name="id-transform-expr-07" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-transform-expr-07.xml</output-file>
             </state>
           </test-case>   
           <test-case  name="id-transform-expr-08" FilePath="TransformExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression where a comment is transformed.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <state time="0">
             	<query name="id-transform-expr-08" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>             	
             	<output-file role="principal" compare="Fragment">id-transform-expr-08.xml</output-file>
             </state>
           </test-case>  
           <test-case  name="id-transform-expr-09" FilePath="TransformExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression where the modify clause contains a call to fn:error()</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>
             <state time="0">
             	<query name="id-transform-expr-09" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<expected-error>FOER0000</expected-error>
             </state>
           </test-case>  
           <test-case  name="id-transform-expr-010" FilePath="TransformExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression where two variables are bounded and only one is transformed.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <state time="0">
             	<query name="id-transform-expr-010" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-transform-expr-010.xml</output-file>
             </state>
           </test-case>
           <test-case  name="id-transform-expr-011" FilePath="TransformExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression where two variables are bounded and both are transformed.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <state time="0">
               <query name="id-transform-expr-011" date="2007-06-04"/>
               <input-file role="principal-data" variable="input-context">works-mod</input-file>
               <output-file role="principal" compare="Fragment">id-transform-expr-011.xml</output-file>
             </state>
           </test-case> 
           <test-case  name="id-transform-expr-012" FilePath="TransformExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression where the source expression is an updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <state time="0">
             	<query name="id-transform-expr-012" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>             	
             </state> 
           </test-case>  
           <test-case  name="id-transform-expr-013" FilePath="TransformExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression where the modify clause contains a non-updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <state time="0">
             	<query name="id-transform-expr-013" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0002</expected-error>              	
             </state>
           </test-case>    
           <test-case  name="id-transform-expr-014" FilePath="TransformExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression where the return expression contains an updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <state time="0">
             	<query name="id-transform-expr-014" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>             	
             </state>
           </test-case> 
           <test-case  name="id-transform-expr-015" FilePath="TransformExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression the pending update list contains a node that was not created within this transform expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <state time="0">
             	<query name="id-transform-expr-015" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUDY0014</expected-error>              	
             </state>
           </test-case>    
           <test-case  name="id-transform-expr-016" FilePath="TransformExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression, which inserts a node and deletes a node with the same name.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <state time="0">
             	<query name="id-transform-expr-016" date="2007-07-27"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-transform-expr-016.xml</output-file>
             </state>
           </test-case>   
           <test-case  name="id-transform-expr-017" FilePath="TransformExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression, which deletes a node and insert a node with the same name.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <state time="0">
             	<query name="id-transform-expr-017" date="2007-07-27"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-transform-expr-017.xml</output-file>
             </state>
           </test-case>  
           <test-case  name="id-transform-expr-018" FilePath="TransformExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression, which contains an embedded Transform expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <state time="0">
             	<query name="id-transform-expr-018" date="2007-07-31"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0002</expected-error>
             </state>
           </test-case>   
           <test-case  name="id-transform-expr-019" FilePath="TransformExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression, where an element node is affected by more than one rename expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <state time="0">
             	<query name="id-transform-expr-019" date="2007-07-31"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUDY0015</expected-error>
             </state>
           </test-case>    
           <test-case  name="id-transform-expr-020" FilePath="TransformExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression, where an element node is affected by more than one replace expression (no "value of" being specified.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <state time="0">
             	<query name="id-transform-expr-020" date="2007-07-31"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUDY0016</expected-error>
             </state>
           </test-case>   
           <test-case  name="id-transform-expr-021" FilePath="TransformExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression, where an attribute node is affected by more than one rename expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <state time="0">
             	<query name="id-transform-expr-021" date="2007-08-01"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUDY0015</expected-error>
             </state>
           </test-case>  
           <test-case  name="id-transform-expr-022" FilePath="TransformExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression, where an attribute node is affected by more than one replace expression (no "value of" being specified.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <state time="0">
             	<query name="id-transform-expr-022" date="2007-08-01"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUDY0016</expected-error>
             </state>
           </test-case>    
           <test-case  name="id-transform-expr-023" FilePath="TransformExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression, where an attribute node is affected by more than one replace value expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <state time="0">
             	<query name="id-transform-expr-023" date="2007-08-01"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUDY0017</expected-error>
             </state>
           </test-case>
           <test-case  name="id-transform-expr-024" FilePath="TransformExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression, where an element node is affected by more than one replace value expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <state time="0">
             	<query name="id-transform-expr-024" date="2007-08-01"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUDY0017</expected-error>
             </state>
           </test-case>            
           <test-case  name="id-transform-expr-025" FilePath="TransformExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression, where an Element is modified by a "replace" expression and of its children is also updated by a "replace with value of" expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <state time="0">
             	<query name="id-transform-expr-025" date="2007-08-01"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-transform-expr-025.xml</output-file>
             </state>
           </test-case> 
           <test-case  name="id-transform-expr-026" FilePath="TransformExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression, where the source expression results in more than one single element node.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <state time="0">
             	<query name="id-transform-expr-026" date="2007-08-02"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUTY0013</expected-error>
             </state>
           </test-case>    
           <test-case  name="id-transform-expr-027" FilePath="TransformExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression, where the source expression results in more than one single attribute node.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <state time="0">
             	<query name="id-transform-expr-027" date="2007-08-02"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUTY0013</expected-error>
             </state>
           </test-case>
           <test-case name="id-transform-expr-028" FilePath="TransformExpressions/" scenario="standard" Creator="Jenise Reyes">
             <description>Evaluates a transform expression, which inserts a node to insure the original data is not modified.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>
             <state time="0">
             	<query name="id-transform-expr-028" date="2007-10-12"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-transform-expr-028-test" date="2007-10-12"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
            	<output-file role="principal" compare="Fragment">id-transform-expr-028.xml</output-file>
             </state>
           </test-case>
           <test-case name="id-transform-expr-029" FilePath="TransformExpressions/" scenario="standard" Creator="Jenise Reyes">
             <description>Evaluates a transform expression, which deletes a node to insure the original data is not modified.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>
             <state time="0">
             	<query name="id-transform-expr-029" date="2007-10-12"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-transform-expr-029-test" date="2007-10-12"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
            	<output-file role="principal" compare="Fragment">id-transform-expr-029.xml</output-file>
             </state>
           </test-case>
           <test-case name="id-transform-expr-030" FilePath="TransformExpressions/" scenario="standard" Creator="Jenise Reyes">
             <description>Evaluates a transform expression, which contains a replace expression to insure the original data is not modified.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>
             <state time="0">
             	<query name="id-transform-expr-030" date="2007-10-12"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-transform-expr-030-test" date="2007-10-12"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
            	<output-file role="principal" compare="Fragment">id-transform-expr-030.xml</output-file>
             </state>
           </test-case>
           <test-case name="id-transform-expr-031" FilePath="TransformExpressions/" scenario="standard" Creator="Jenise Reyes">
             <description>Evaluates a transform expression, which contains a rename expression to insure the original data is not modified.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>
             <state time="0">
             	<query name="id-transform-expr-031" date="2007-10-12"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-transform-expr-031-test" date="2007-10-12"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
            	<output-file role="principal" compare="Fragment">id-transform-expr-031.xml</output-file>
             </state>
           </test-case>
    </test-group>    
    <test-group name = "ExtensionExistingFunctions">
      <GroupInfo>
        <title>Extension to Existing Expressions</title>
        <description/>
      </GroupInfo>
    <test-group name="FLWORExpression">
        <GroupInfo>
            <title>Extension to FLWOR Expressions</title>
            <description/>
         </GroupInfo>     
           <test-case  name="id-flwor-expr-01" FilePath="FLWORExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression used with FLWOR expression where the let clause is an updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.5" section-title="FLWOR Expression" section-pointer="id-flwor-expr"/>              
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>             
             <state time="0">
             	<query name="id-flwor-expr-01" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>         
           <test-case  name="id-flwor-expr-02" FilePath="FLWORExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression used with FLWOR expression where the for clause is an updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.5" section-title="FLWOR Expression" section-pointer="id-flwor-expr"/>  
             <state time="0">
             	<query name="id-flwor-expr-02" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>   
           <test-case  name="id-flwor-expr-03" FilePath="FLWORExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression used with FLWOR expression where the "where" clause is an updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.5" section-title="FLWOR Expression" section-pointer="id-flwor-expr"/>  
             <state time="0">
             	<query name="id-flwor-expr-03" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>      
           <test-case  name="id-flwor-expr-04" FilePath="FLWORExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression used with FLWOR expression where the "order by" clause is an updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.5" section-title="FLWOR Expression" section-pointer="id-flwor-expr"/>   
             <state time="0">
             	<query name="id-flwor-expr-04" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>  
           <test-case  name="id-flwor-expr-05" FilePath="FLWORExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a delete expression used with FLWOR expression where the let clause is an updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.5" section-title="FLWOR Expression" section-pointer="id-flwor-expr"/>              
             <state time="0">
             	<query name="id-flwor-expr-05" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>   
           <test-case  name="id-flwor-expr-06" FilePath="FLWORExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a delete expression used with FLWOR expression where the for clause is an updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.5" section-title="FLWOR Expression" section-pointer="id-flwor-expr"/>  
             <state time="0">
             	<query name="id-flwor-expr-06" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>   
           <test-case  name="id-flwor-expr-07" FilePath="FLWORExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a delete expression used with FLWOR expression where the "where" clause is an updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.5" section-title="FLWOR Expression" section-pointer="id-flwor-expr"/>  
             <state time="0">
             	<query name="id-flwor-expr-07" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>   
           <test-case  name="id-flwor-expr-08" FilePath="FLWORExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a delete expression used with FLWOR expression where the "order by" clause is an updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.5" section-title="FLWOR Expression" section-pointer="id-flwor-expr"/>  
             <state time="0">
             	<query name="id-flwor-expr-08" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>
           <test-case  name="id-flwor-expr-09" FilePath="FLWORExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression used with FLOWR expression with "let" clause set to an updating (replace) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.5" section-title="FLWOR Expression" section-pointer="id-flwor-expr"/>             
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-flwor-expr-09" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>    
           <test-case  name="id-flwor-expr-010" FilePath="FLWORExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression used with FLOWR expression with "for" clause set to an updating (replace) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.5" section-title="FLWOR Expression" section-pointer="id-flwor-expr"/> 
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-flwor-expr-010" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case> 
           <test-case  name="id-flwor-expr-011" FilePath="FLWORExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression used with FLOWR expression with "where" clause set to an updating (replace) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.5" section-title="FLWOR Expression" section-pointer="id-flwor-expr"/> 
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-flwor-expr-011" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>
           <test-case  name="id-flwor-expr-012" FilePath="FLWORExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression used with FLOWR expression with "order by" clause set to an updating (replace) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.5" section-title="FLWOR Expression" section-pointer="id-flwor-expr"/> 
             <spec-citation spec="XQUPDATE" section-number="2.4.3.1" section-title="Replacing a Node" section-pointer="id-replacing-node"/>             
             <state time="0">
             	<query name="id-flwor-expr-012" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>
           <test-case  name="id-flwor-expr-013" FilePath="FLWORExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluation of a rename expression use with FLWOR expression where let clause is an updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.5" section-title="FLWOR Expression" section-pointer="id-flwor-expr"/>               
             <state time="0">
             	<query name="id-flwor-expr-013" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>  
           <test-case  name="id-flwor-expr-014" FilePath="FLWORExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluation of a rename expression use with FLWOR expression where the "for" clause is an updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.5" section-title="FLWOR Expression" section-pointer="id-flwor-expr"/>               
             <state time="0">
             	<query name="id-flwor-expr-014" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>   
           <test-case  name="id-flwor-expr-015" FilePath="FLWORExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluation of a rename expression use with FLWOR expression where the "where" clause is an updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.5" section-title="FLWOR Expression" section-pointer="id-flwor-expr"/>               
             <state time="0">
             	<query name="id-flwor-expr-015" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>             	
             </state>                    
           </test-case>   
           <test-case  name="id-flwor-expr-016" FilePath="FLWORExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluation of a rename expression use with FLWOR expression where the "order by" clause is an updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.5" section-title="FLWOR Expression" section-pointer="id-flwor-expr"/>               
             <state time="0">
             	<query name="id-flwor-expr-016" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>             
           <test-case  name="id-flwor-expr-017" FilePath="FLWORExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression together with a FLWOR expression where the "let" expression is a transform expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <spec-citation spec="XQUPDATE" section-number="2.5.5" section-title="FLWOR Expression" section-pointer="id-flwor-expr"/>               
             <state time="0">
             	<query name="id-flwor-expr-017" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<output-file role="principal" compare="Fragment">id-flwor-expr-017.xml</output-file>
             </state>
           </test-case>    
           <test-case  name="id-flwor-expr-018" FilePath="FLWORExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression together with a FLWOR expression where the "for" expression is a non updating (transform) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <spec-citation spec="XQUPDATE" section-number="2.5.5" section-title="FLWOR Expression" section-pointer="id-flwor-expr"/> 
             <state time="0">
             	<query name="id-flwor-expr-018" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<output-file role="principal" compare="Fragment">id-flwor-expr-018.xml</output-file>
             </state>
           </test-case>      
           <test-case  name="id-flwor-expr-019" FilePath="FLWORExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression together with a FLWOR expression where the "where" expression is an non updating (transform) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <spec-citation spec="XQUPDATE" section-number="2.5.5" section-title="FLWOR Expression" section-pointer="id-flwor-expr"/>  
             <state time="0">
             	<query name="id-flwor-expr-019" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<output-file role="principal" compare="Fragment">id-flwor-expr-019.xml</output-file>
             </state>
           </test-case>  
           <test-case  name="id-flwor-expr-020" FilePath="FLWORExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression together with a FLWOR expression where the "order by" expression is a non updating (transform) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <spec-citation spec="XQUPDATE" section-number="2.5.5" section-title="FLWOR Expression" section-pointer="id-flwor-expr"/> 
             <state time="0">
             	<query name="id-flwor-expr-020" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<output-file role="principal" compare="Fragment">id-flwor-expr-020.xml</output-file>
             </state>
           </test-case>    
           <test-case  name="id-flwor-expr-021" FilePath="FLWORExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of a FLWOR expression, where return is a delete expression that deletes a series nodes bounded via let clause.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/>                
             <spec-citation spec="XQUPDATE" section-number="2.5.1" section-title="FLWOR Expression" section-pointer="id-flwor-expr"/> 
             <state time="0">
             	<query name="id-flwor-expr-021" date="2007-08-02"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>           	
             </state>
             <state time = "1">
             	<query name="id-flwor-expr-021-test" date="2007-08-02"/>             
           	    <input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Text">id-flwor-expr-021.txt</output-file>
             </state>             
           </test-case>   
           <test-case  name="id-flwor-expr-022" FilePath="FLWORExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of a FLWOR expression, where return is a delete expression that deletes a series nodes bounded via for clause.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/>                
             <spec-citation spec="XQUPDATE" section-number="2.5.1" section-title="FLWOR Expression" section-pointer="id-flwor-expr"/> 
             <state time="0">
             	<query name="id-flwor-expr-022" date="2007-08-02"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>           	
             </state>
             <state time = "1">
             	<query name="id-flwor-expr-022-test" date="2007-08-02"/>             
           	    <input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Text">id-flwor-expr-022.txt</output-file>
             </state>             
           </test-case>                            
       </test-group> 
      <test-group name="TypeswitchExpression">
        <GroupInfo>
            <title>Extension to Typeswitch Expressions</title>
            <description/>
         </GroupInfo>
           <test-case  name="id-typeswitch-expr-01" FilePath="TypeswitchExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression used with typeswitch expression where the operand is an updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/>                  
             <state time="0">
             	<query name="id-typeswitch-expr-01" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>             	
             </state>
           </test-case>  
           <test-case  name="id-typeswitch-expr-02" FilePath="TypeswitchExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression used with typeswitch expression where a branch (a "case") is an updating expression. Other branches return ().</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/>                
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <state time="0">
             	<query name="id-typeswitch-expr-02" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-typeswitch-expr-02-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
            	<output-file role="principal" compare="Fragment">id-typeswitch-expr-02.xml</output-file>
             </state>
           </test-case>    
           <test-case  name="id-typeswitch-expr-03" FilePath="TypeswitchExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression used with typeswitch expression where a branch (the "default") is an updating expression. Other branches return ().</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/>   
             <state time="0">
             	<query name="id-typeswitch-expr-03" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-typeswitch-expr-03-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-typeswitch-expr-03.xml</output-file>
             </state>
           </test-case> 
           <test-case  name="id-typeswitch-expr-04" FilePath="TypeswitchExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression used with typeswitch expression where a branch (a "case") is an updating expression. Other branches return fn:error().</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/>  
             <state time="0">
             	<query name="id-typeswitch-expr-04" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-typeswitch-expr-04-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-typeswitch-expr-04.xml</output-file>
             </state>
           </test-case>     
           <test-case  name="id-typeswitch-expr-05" FilePath="TypeswitchExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression used with typeswitch expression where a branch (the "default") is an updating expression. Other branches return fn:error().</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/>  
             <state time="0">
             	<query name="id-typeswitch-expr-05" date="2007-06-04"/> 
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<expected-error>FOER0000</expected-error> 
             </state>
           </test-case>        
           <test-case  name="id-typeswitch-expr-06" FilePath="TypeswitchExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression used with typeswitch expression where a branch (a "case") is an updating expression. Other branches return a string.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/>   
             <state time="0">
             	<query name="id-typeswitch-expr-06" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>             	
             </state>
           </test-case>     
           <test-case  name="id-typeswitch-expr-07" FilePath="TypeswitchExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression used with typeswitch expression where a branch (the "default") is an updating expression. Other branches return a string.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/>   
             <state time="0">
             	<query name="id-typeswitch-expr-07" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>             	
             </state>
           </test-case>            
           <test-case  name="id-typeswitch-expr-08" FilePath="TypeswitchExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a delete expression used with typeswitch expression where the operand is an updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/>  
             <state time="0">
             	<query name="id-typeswitch-expr-08" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>             	
             </state>
           </test-case>     
           <test-case  name="id-typeswitch-expr-09" FilePath="TypeswitchExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a delete expression used with typeswitch expression where a branch (a case) is an updating expression.  The other branches are set to "()".</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/>  
             <state time="0">
             	<query name="id-typeswitch-expr-09" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-typeswitch-expr-09-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-typeswitch-expr-09.xml</output-file>
             </state>
           </test-case>  
           <test-case  name="id-typeswitch-expr-010" FilePath="TypeswitchExpression/" scenario= "standard" Creator="Carmelo Montanez">
             <description>Evaluates a delete expression used with typeswitch expression where a branch (the default) is an updating expression.  The other branches are set to "()".</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/> 
             <state time="0">
             	<query name="id-typeswitch-expr-010" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-typeswitch-expr-010-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-typeswitch-expr-010.xml</output-file>
             </state>
           </test-case>  
           <test-case  name="id-typeswitch-expr-011" FilePath="TypeswitchExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of insert expression used with typeswitch expression where branch (a "case") is an updating expression.  All other branches return "fn:error()".</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/> 
             <state time="0">
             	<query name="id-typeswitch-expr-011" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-typeswitch-expr-011-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-typeswitch-expr-011.xml</output-file>
             	<output-file role="principal" compare="Fragment">id-typeswitch-expr-011-2.xml</output-file>             	
             </state>
           </test-case>         
           <test-case  name="id-typeswitch-expr-012" FilePath="TypeswitchExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluation of insert expression used with typeswitch expression where branch (the "default") is an updating expression.  All other branches return "fn:error()".</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/> 
             <state time="0">
             	<query name="id-typeswitch-expr-012" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<expected-error>FOER0000</expected-error>             	
             </state>
           </test-case>  
           <test-case  name="id-typeswitch-expr-013" FilePath="TypeswitchExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluation of insert expression used with typeswitch expression where branch (the "case") is an updating expression.  All other branches return a string.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/> 
             <state time="0">
             	<query name="id-typeswitch-expr-013" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>             	
             </state>
           </test-case>  
           <test-case  name="id-typeswitch-expr-014" FilePath="TypeswitchExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluation of insert expression used with typeswitch expression where branch (the "default") is an updating expression.  All other branches return string.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/> 
             <state time="0">
             	<query name="id-typeswitch-expr-014" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>             	
             </state>
           </test-case>             
           <test-case  name="id-typeswitch-expr-015" FilePath="TypeswitchExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression used together with a typeswitch expression where the operand is an updating (replace) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/> 
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-typeswitch-expr-015" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>             	
             </state>
           </test-case>
           <test-case  name="id-typeswitch-expr-016" FilePath="TypeswitchExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression used together with a typeswitch expression where a branch (a case) is an updating (replace) expression. Other branches are the empty sequence.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/> 
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-typeswitch-expr-016" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-typeswitch-expr-016-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-typeswitch-expr-016.xml</output-file>
             </state>
           </test-case> 
           <test-case  name="id-typeswitch-expr-017" FilePath="TypeswitchExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression used together with a typeswitch expression where a branch (the default) is an updating (replace) expression. Other branches are the empty sequence.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/> 
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-typeswitch-expr-017" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-typeswitch-expr-017-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-typeswitch-expr-017.xml</output-file>
             </state>
           </test-case> 
           <test-case  name="id-typeswitch-expr-018" FilePath="TypeswitchExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression used together with a typeswitch expression where a branch (a case) is an updating (replace) expression. Other branches are a call to the fn:error function.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/> 
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-typeswitch-expr-018" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-typeswitch-expr-018-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-typeswitch-expr-018.xml</output-file>
             </state>
           </test-case>   
           <test-case  name="id-typeswitch-expr-019" FilePath="TypeswitchExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression used together with a typeswitch expression where a branch (the default) is an updating (replace) expression. Other branches are a call to the fn:error function.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-typeswitch-expr-019" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-typeswitch-expr-019-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-typeswitch-expr-019.xml</output-file>
             </state>
           </test-case>
           <test-case  name="id-typeswitch-expr-020" FilePath="TypeswitchExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression used together with a typeswitch expression where a branch (a case) is an updating (replace) expression. Other branches return a string.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/> 
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-typeswitch-expr-020" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>
             </state>
           </test-case> 
           <test-case  name="id-typeswitch-expr-021" FilePath="TypeswitchExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression used together with a typeswitch expression where a branch (the default) is an updating (transform) expression. Other branches return a string.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name = "id-typeswitch-expr-021" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>             	
             </state>
           </test-case>             
           <test-case  name="id-typeswitch-expr-022" FilePath="TypeswitchExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluation of a rename expression use with a typeswitch expression where the operand is an updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/>               
             <state time="0">
             	<query name="id-typeswitch-expr-022" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>  
           <test-case  name="id-typeswitch-expr-023" FilePath="TypeswitchExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of a rename expression use with a typeswitch expression where a branch (a case) is an updating expression.  Other branches equal to the empty sequence</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/>  
             <state time="0">
             	<query name="id-typeswitch-expr-023" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-typeswitch-expr-023-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-typeswitch-expr-023.xml</output-file>  
             </state>
           </test-case>  
           <test-case  name="id-typeswitch-expr-024" FilePath="TypeswitchExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of a rename expression use with a typeswitch expression where a branch (the default) is an updating expression. Other branches equal to the empty sequence.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/> 
             <state time="0">
             	<query name="id-typeswitch-expr-024" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-typeswitch-expr-024-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>	
             	<output-file role="principal" compare="Fragment">id-typeswitch-expr-024.xml</output-file>  
             </state>
           </test-case> 
           <test-case  name="id-typeswitch-expr-025" FilePath="TypeswitchExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of a rename expression use with a typeswitch expression where a branch (a case) is an updating expression.  Other branches are an invokation to "fn:error()" </description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/> 
             <state time="0">
             	<query name="id-typeswitch-expr-025" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-typeswitch-expr-025-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-typeswitch-expr-025.xml</output-file>  
             </state>
           </test-case>  
           <test-case  name="id-typeswitch-expr-026" FilePath="TypeswitchExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluation of a rename expression use with a typeswitch expression where a branch (the default) is an updating expression.  Other branches are an invokation to "fn:error()" </description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/>  
             <state time="0">
             	<query name="id-typeswitch-expr-026" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
              	<expected-error>FOER0000</expected-error> 
             </state>
           </test-case>   
           <test-case  name="id-typeswitch-expr-027" FilePath="TypeswitchExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluation of a rename expression use with a typeswitch expression a branch (a case)is an updating expression.  Other branches return a string</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/> 
             <state time="0">
             	<query name="id-typeswitch-expr-027" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>  
           <test-case  name="id-typeswitch-expr-028" FilePath="TypeswitchExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluation of a rename expression use with a typeswitch expression a branch (the default)is an updating expression.  Other branches return a string</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/>  
             <state time="0">
             	<query name="id-typeswitch-expr-028" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>             	
             </state>
           </test-case>  
           <test-case  name="id-typeswitch-expr-029" FilePath="TypeswitchExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression together with a typeswitch expression where the operand is a non updating (transform) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/> 
             <state time="0">
             	<query name="id-typeswitch-expr-029" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
              	<output-file role="principal" compare="Fragment">id-typeswitch-expr-029.xml</output-file>         	
             </state>
           </test-case>   
           <test-case  name="id-typeswitch-expr-030" FilePath="TypeswitchExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression together with a typeswitch expression where a branch (a case) is an updating (transform) expression. Other branches are "()"</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/> 
             <state time="0">
             	<query name="id-typeswitch-expr-030" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-typeswitch-expr-030.xml</output-file>
             </state>
           </test-case>   
           <test-case  name="id-typeswitch-expr-031" FilePath="TypeswitchExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression together with a typeswitch expression where a branch (the default) is an updating (transform) expression.  Other branches are "()".</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/> 
             <state time="0">
             	<query name="id-typeswitch-expr-031" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-typeswitch-expr-031.xml</output-file> 
             </state>
           </test-case>
           <test-case  name="id-typeswitch-expr-032" FilePath="TypeswitchExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression together with a typeswitch expression where a branch (a case) is a non updating (transform) expression and the other cases an invokation to fn:error.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/> 
             <state time="0">
             	<query name="id-typeswitch-expr-032" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-typeswitch-expr-032.xml</output-file> 
             </state>
           </test-case> 
           <test-case  name="id-typeswitch-expr-033" FilePath="TypeswitchExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression together with a typeswitch expression where a branch (the default)is a non updating (transform) expression and the other cases an invokation to fn:error.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/> 
             <state time="0">
             	<query name="id-typeswitch-expr-033" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-typeswitch-expr-033.xml</output-file> 
             </state>
           </test-case>  
           <test-case  name="id-typeswitch-expr-034" FilePath="TypeswitchExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression together with a typeswitch expression where a branch (a case)is an updating (transform) and the other branches return a string.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/> 
             <state time="0">
             	<query name="id-typeswitch-expr-034" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<output-file role="principal" compare="Fragment">id-typeswitch-expr-034.xml</output-file>             	
             </state>
           </test-case>   
           <test-case  name="id-typeswitch-expr-035" FilePath="TypeswitchExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression together with a typeswitch expression where a branch (the default)is an updating (transform) and the other branches return a string.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <spec-citation spec="XQUPDATE" section-number="2.5.2" section-title="Typeswitch Expression" section-pointer="id-typeswitch-expr"/> 
             <state time="0">
             	<query name="id-typeswitch-expr-035" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<output-file role="principal" compare="Fragment">id-typeswitch-expr-035.xml</output-file>             	
             </state>
           </test-case>            
      </test-group>  
      <test-group name="ConditionalExpression">
        <GroupInfo>
            <title>Extension to conditional Expressions</title>
            <description/>
         </GroupInfo>
          <test-case  name="id-conditional-expr-01" FilePath="ConditionalExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression used with conditional expression where a branch (the "then") is an updating expression. Other branch return ().</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/>  
             <state time="0">
             	<query name="id-conditional-expr-01" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-conditional-expr-01-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-conditional-expr-01.xml</output-file>
             </state>
           </test-case>  
           <test-case  name="id-conditional-expr-02" FilePath="ConditionalExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression used with conditional expression where a branch (the "else") is an updating expression. Other branch returns ().</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/> 
             <state time="0">
             	<query name="id-conditional-expr-02" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-conditional-expr-02-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-conditional-expr-02.xml</output-file>
             </state>
           </test-case> 
           <test-case  name="id-conditional-expr-03" FilePath="ConditionalExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression used with conditional expression where a branch (the "then") is an updating expression. Other branch calls fn:error().</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/>  
             <state time="0">
             	<query name="id-conditional-expr-03" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-conditional-expr-03-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-conditional-expr-03.xml</output-file>
             </state>
           </test-case>  
           <test-case  name="id-conditional-expr-04" FilePath="ConditionalExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression used with conditional expression where a branch (the "else") is an updating expression. Other branch calls fn:error().</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/> 
             <state time="0">
             	<query name="id-conditional-expr-04" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-conditional-expr-04-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-conditional-expr-04.xml</output-file>
             </state>
           </test-case>
           <test-case  name="id-conditional-expr-05" FilePath="ConditionalExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression used with conditional expression where a branch (the "then") is an updating expression. Other branch print a string.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/>  
             <state time="0">
             	<query name="id-conditional-expr-05" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>             	
             </state>
           </test-case>       
           <test-case  name="id-conditional-expr-06" FilePath="ConditionalExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression used with conditional expression where a branch (the "else") is an updating expression. Other branch print a string.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/>  
             <state time="0">
             	<query name="id-conditional-expr-06" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>             	
             </state>
           </test-case>            
           <test-case  name="id-conditional-expr-07" FilePath="ConditionalExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of a delete expression used with conditional expression where a branch (the "then") is an updating expression.  The "else" returns the empty sequence.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/> 
             <state time="0">
             	<query name="id-conditional-expr-07" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-conditional-expr-07-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-conditional-expr-07.xml</output-file>
             </state>
           </test-case>    
           <test-case  name="id-conditional-expr-08" FilePath="ConditionalExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of a delete expression used with conditional expression where a branch (the "else") is an updating expression.  The "then" returns the empty sequence.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/>
             <state time="0">
             	<query name="id-conditional-expr-08" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-conditional-expr-08-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-conditional-expr-08.xml</output-file>
             </state>
           </test-case>   
           <test-case  name="id-conditional-expr-09" FilePath="ConditionalExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of a delete expression used with conditional expression where a branch (the "then") is an updating expression.  The "else" returns fn:error().</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/>
             <state time="0">
             	<query name="id-conditional-expr-09" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-conditional-expr-09-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-conditional-expr-09.xml</output-file>
             </state>
           </test-case>
           <test-case  name="id-conditional-expr-010" FilePath="ConditionalExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of a delete expression used with conditional expression where a branch (the "else") is an updating expression.  The "then" returns fn:error().</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/> 
             <state time="0">
             	<query name="id-conditional-expr-010" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-conditional-expr-010-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-conditional-expr-010.xml</output-file>
             </state>
           </test-case>           
           <test-case  name="id-conditional-expr-011" FilePath="ConditionalExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluation of a delete expression used with conditional expression where a branch (the "then") is an updating expression. The "else" print a string</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/>
             <state time="0">
             	<query name="id-conditional-expr-011" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>             	
             </state>
           </test-case>  
           <test-case  name="id-conditional-expr-012" FilePath="ConditionalExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluation of a delete expression used with conditional expression where a branch (the "else") is an updating expression. The "then" print a string</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/> 
             <state time="0">
             	<query name="id-conditional-expr-012" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>             	
             </state>
           </test-case>            
           <test-case  name="id-conditional-expr-013" FilePath="ConditionalExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression used together with a conditional expression where a branch (the "then") is an updating (replace) expression. The "else" return the empty sequence.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-conditional-expr-013" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-conditional-expr-013-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>             
             	<output-file role="principal" compare="Fragment">id-conditional-expr-013.xml</output-file>
             </state>
           </test-case>   
           <test-case  name="id-conditional-expr-014" FilePath="ConditionalExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression used together with a conditional expression where a branch (the "else") is an updating (replace) expression. The "then" return the empty sequence.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/> 
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-conditional-expr-014" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-conditional-expr-014-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-conditional-expr-014.xml</output-file>
             </state>
           </test-case>  
           <test-case  name="id-conditional-expr-015" FilePath="ConditionalExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression used together with a conditional expression where a branch (the "then") is an updating (replace) expression. The "else" invokes the fn:error function.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/> 
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-conditional-expr-015" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-conditional-expr-015-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-conditional-expr-015.xml</output-file>
             </state>
           </test-case> 
           <test-case  name="id-conditional-expr-016" FilePath="ConditionalExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression used together with a conditional expression where a branch (the "else") is an updating (replace) expression. The "then" invokes the fn:error function.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-conditional-expr-016" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>             	
             </state>
             <state time="1">
             	<query name="id-conditional-expr-016-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-conditional-expr-016.xml</output-file>
             </state>
           </test-case>   
           <test-case  name="id-conditional-expr-017" FilePath="ConditionalExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression used together with a conditional expression where a branch (the then) is an updating (replace) expression. The "else" just return a string.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-conditional-expr-017" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>             	
             </state>
           </test-case>  
           <test-case  name="id-conditional-expr-018" FilePath="ConditionalExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression used together with a conditional expression where a branch (the else) is an updating (replace) expression. The "then" just return a string.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/> 
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>
             <state time="0">
             	<query name="id-conditional-expr-018" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>             	
             </state>
           </test-case>             
           <test-case  name="id-conditional-expr-019" FilePath="ConditionalExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of a rename expression used with a conditional expression where a branch (the "then") is an updating expression.  The "else" returns the empty sequence.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/>  
             <state time="0">
             	<query name="id-conditional-expr-019" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-conditional-expr-019-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
        	    <output-file role="principal" compare="Fragment">id-conditional-expr-019.xml</output-file>
             </state>
           </test-case>  
           <test-case  name="id-conditional-expr-020" FilePath="ConditionalExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of a rename expression used with a conditional expression where a branch (the "else") is an updating expression.  The "then" returns the empty sequence.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/>            
             <state time="0">
             	<query name="id-conditional-expr-020" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-conditional-expr-020-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-conditional-expr-020.xml</output-file>  
             </state>
           </test-case>    
           <test-case  name="id-conditional-expr-021" FilePath="ConditionalExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of a rename expression used with a conditional expression where a branch (the "then") is an updating expression.  The "else" invokes the fn:error function.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/>
             <state time="0">
             	<query name="id-conditional-expr-021" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-conditional-expr-021-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-conditional-expr-021.xml</output-file>  
             </state>
           </test-case>  
           <test-case  name="id-conditional-expr-022" FilePath="ConditionalExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of a rename expression used with a conditional expression where a branch (the "else") is an updating expression.  The "then" invokes the fn:error function.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/>
             <state time="0">
             	<query name="id-conditional-expr-022" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-conditional-expr-022-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-conditional-expr-022.xml</output-file>  
             </state>
           </test-case> 
           <test-case  name="id-conditional-expr-023" FilePath="ConditionalExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluation of rename expression used with conditional expression where a branch (the "then") is an updating expression.  The "else" prints a string.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/>
             <state time="0">
             	<query name="id-conditional-expr-023" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>  
           <test-case  name="id-conditional-expr-024" FilePath="ConditionalExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluation of a rename expression used with conditional expression where a branch (the "else") is an updating expression.  The "then" print a string.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/> 
             <state time="0">
             	<query name="id-conditional-expr-024" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>             	
             </state>
           </test-case>             
           <test-case  name="id-conditional-expr-025" FilePath="ConditionalExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression together with a conditional expression where a branch (the "then")is an updating (transform) and the "else" returns the empty sequence.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/> 
             <state time="0">
             	<query name="id-conditional-expr-025" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-conditional-expr-025.xml</output-file> 
             </state>
           </test-case>   
           <test-case  name="id-conditional-expr-026" FilePath="ConditionalExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression together with a conditional expression where a branch (the "else")is an updating (transform) and the "then" returns the empty sequence.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/>
             <state time="0">
             	<query name="id-conditional-expr-026" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-conditional-expr-026.xml</output-file> 
             </state>
           </test-case>    
           <test-case  name="id-conditional-expr-027" FilePath="ConditionalExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression together with a conditional expression where a branch (the "then")is an updating (transform) and the "else" is an invokation to fn:error().</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/>
             <state time="0">
             	<query name="id-conditional-expr-027" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-conditional-expr-027.xml</output-file> 
             </state>
           </test-case> 
           <test-case  name="id-conditional-expr-028" FilePath="ConditionalExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression together with a conditional expression where a branch (the "else")is an updating (transform) and the "then" is an invokation to fn:error().</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/>
             <state time="0">
             	<query name="id-conditional-expr-028" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-conditional-expr-028.xml</output-file> 
             </state>
           </test-case> 
           <test-case  name="id-conditional-expr-029" FilePath="ConditionalExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression together with a conditional expression where a branch (the "then")is an non updating (transform) and the "else" returns a string.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/>
             <state time="0">
             	<query name="id-conditional-expr-029" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
              	<output-file role="principal" compare="Fragment">id-conditional-expr-029.xml</output-file>
             </state>
           </test-case>
           <test-case  name="id-conditional-expr-030" FilePath="ConditionalExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression together with a conditional expression where a branch (the "else")is a non updating (transform) and the "then" return a string.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/>
             <state time="0">
             	<query name="id-conditional-expr-030" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<output-file role="principal" compare="Fragment">id-conditional-expr-030.xml</output-file> 
             </state>
           </test-case>
           <test-case  name="id-conditional-expr-031" FilePath="ConditionalExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression together with a conditional expression where the if-clause is an non-updating (transform) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/>
             <state time="0">
             	<query name="id-conditional-expr-031" date="2007-08-02"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Text">id-conditional-expr-031.txt</output-file>              	
             </state>
           </test-case>
           <test-case  name="id-conditional-expr-032" FilePath="ConditionalExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression together with a conditional expression where the if-clause is an updating (delete) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/>
             <state time="0">
             	<query name="id-conditional-expr-032" date="2007-08-02"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>
           <test-case  name="id-conditional-expr-033" FilePath="ConditionalExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a conditional expression, where both branches are updating expressions (delete).  Both delete the same node (only one is selected).</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/>  
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/>
             <state time="0">
             	<query name="id-conditional-expr-033" date="2007-08-05"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-conditional-expr-033-test" date="2007-08-05"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-conditional-expr-033.xml</output-file> 
             </state>             
           </test-case>  
           <test-case  name="id-conditional-expr-034" FilePath="ConditionalExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a conditional expression, where the if branch contains a delete expression and the else branch contains transform expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/>
             <state time="0">
             	<query name="id-conditional-expr-034" date="2007-08-06"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>           
           <test-case  name="id-conditional-expr-035" FilePath="ConditionalExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a conditional expression, where both branches contains a transform expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <spec-citation spec="XQUPDATE" section-number="2.5.3" section-title="Conditional Expression" section-pointer="id-conditional-expr"/>
             <state time="0">
             	<query name="id-conditional-expr-035" date="2007-08-06"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
            	<output-file role="principal" compare="Fragment">id-conditional-expr-035.xml</output-file>             	
             </state>
           </test-case>   
      </test-group>  
      <test-group name="CommaExpression">
        <GroupInfo>
            <title>Extension to comma Expressions</title>
            <description/>
         </GroupInfo>
            <test-case  name="id-comma-expr-01" FilePath="CommaExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression used with comma expression where a both expressions are updating expressions.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/> 
             <state time="0">
             	<query name="id-comma-expr-01" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-comma-expr-01-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-comma-expr-01.xml</output-file>   
             </state>
           </test-case> 
           <test-case  name="id-comma-expr-02" FilePath="CommaExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression used with comma expression where first expression is an updating expression and second one is ().</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/> 
             <state time="0">
             	<query name="id-comma-expr-02" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-comma-expr-02-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	 <output-file role="principal" compare="Fragment">id-comma-expr-02.xml</output-file>   
             </state>
           </test-case>  
           <test-case  name="id-comma-expr-03" FilePath="CommaExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression used with comma expression where first expression is () and second expression is an updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/>  
             <state time="0">
             	<query name="id-comma-expr-03" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-comma-expr-03-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-comma-expr-03.xml</output-file>   
             </state>
           </test-case>
           <test-case  name="id-comma-expr-04" FilePath="CommaExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression used with comma expression where first expression is an updating expression and second one is call to fn:error().</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/>   
             <state time="0">
             	<query name="id-comma-expr-04" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<expected-error>FOER0000</expected-error>
             </state>
             <state time="1">
             	<query name="id-comma-expr-04-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-comma-expr-04.xml</output-file>   
             </state>
           </test-case>          
           <test-case  name="id-comma-expr-05" FilePath="CommaExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression used with comma expression where first expression is a call to fn:error() and second expression is an updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/>   
             <state time="0">
             	<query name="id-comma-expr-05" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<expected-error>FOER0000</expected-error>
             </state>
             <state time="1">
             	<query name="id-comma-expr-05-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-comma-expr-05.xml</output-file>   
             </state>
           </test-case>
           <test-case  name="id-comma-expr-06" FilePath="CommaExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression used with comma expression where first expression is an updating expression and second one a mathematical expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/>  
             <state time="0">
             	<query name="id-comma-expr-06" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>             	
             </state>
           </test-case>   
           <test-case  name="id-comma-expr-07" FilePath="CommaExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression used with comma expression where first expression is mathematical expression and second one is an updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/>   
             <state time="0">
             	<query name="id-comma-expr-07" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
            	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>         
           <test-case  name="id-comma-expr-08" FilePath="CommaExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation a delete expression used with comma expression where both expressions are updating expressions.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/>
             <state time="0">
             	<query name="id-comma-expr-08" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-comma-expr-08-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-comma-expr-08.xml</output-file>
             </state>
           </test-case>      
           <test-case  name="id-comma-expr-09" FilePath="CommaExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of a delete expression used with comma expression where first expression is an updating expression and the secon one is ().</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/>
             <state time="0">
             	<query name="id-comma-expr-09" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-comma-expr-09-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-comma-expr-09.xml</output-file>
             </state>
           </test-case>     
           <test-case  name="id-comma-expr-010" FilePath="CommaExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of a delete expression used with comma expression where first expression is () and second expression is an updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/>
             <state time="0">
             	<query name="id-comma-expr-010" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-comma-expr-010-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-comma-expr-010.xml</output-file>
             </state>
           </test-case> 
           <test-case  name="id-comma-expr-011" FilePath="CommaExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluation of a delete expression used with comma expression where first expression is an updating expression and the second one a call to fn:error().</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/>
             <state time="0">
             	<query name="id-comma-expr-011" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<expected-error>FOER0000</expected-error>
             </state>
           </test-case>   
           <test-case  name="id-comma-expr-012" FilePath="CommaExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluation of a delete expression used with comma expression where second expression is an updating expression and the first one a call to fn:error().</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/>
             <state time="0">
             	<query name="id-comma-expr-012" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<expected-error>FOER0000</expected-error>
             </state>
           </test-case>                             
           <test-case  name="id-comma-expr-013" FilePath="CommaExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluation of a delete expression used with comma expression where first expression is an updating expression and the second one is a mathematical expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/>
             <state time="0">
             	<query name="id-comma-expr-013" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>             	
             </state>
           </test-case>   
           <test-case  name="id-comma-expr-014" FilePath="CommaExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluation of a delete expression used with comma expression where first expression is a mathematical expression and the second one is an updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/> 
             <state time="0">
             	<query name="id-comma-expr-014" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>             	
             </state>
           </test-case>           
           <test-case  name="id-comma-expr-015" FilePath="CommaExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of a replace expression used with comma expression where both expressions are updating (replace) expressions.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-comma-expr-015" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-comma-expr-015-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-comma-expr-015.xml</output-file>
             </state>
           </test-case>
           <test-case  name="id-comma-expr-016" FilePath="CommaExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of a replace expression used with comma expression where first expression is an updating (replace) expression and the second one is ().</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-comma-expr-016" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-comma-expr-016-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-comma-expr-016.xml</output-file>
             </state>
           </test-case>  
           <test-case  name="id-comma-expr-017" FilePath="CommaExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of a replace expression used with comma expression where first expression is the empty sequence and the second one is an updating (replace) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/> 
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-comma-expr-017" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-comma-expr-017-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-comma-expr-017.xml</output-file>
             </state>
           </test-case>  
           <test-case  name="id-comma-expr-018" FilePath="CommaExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluation of a replace expression used with comma expression where first expression is an updating (replace) expression and the second one a call to fn:error().</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-comma-expr-018" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<expected-error>FOER0000</expected-error>
             </state>
           </test-case>   
           <test-case  name="id-comma-expr-019" FilePath="CommaExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluation of a replace expression used with comma expression where first expression is a call to fn:error() and the second one is an updating (replace) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-comma-expr-019" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
              	<expected-error>FOER0000</expected-error>
             </state>
           </test-case>   
           <test-case  name="id-comma-expr-020" FilePath="CommaExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluation of a replace expression used with comma expression where first expression is an updating (replace) expression and the second one is a mathematical expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/> 
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-comma-expr-020" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>             	
             </state>
           </test-case>    
           <test-case  name="id-comma-expr-021" FilePath="CommaExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluation of a replace expression used with comma expression where first expression is a mathematical expression and second one is an updating (replace) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-comma-expr-021" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>             	
             </state>
           </test-case>           
           <test-case  name="id-comma-expr-022" FilePath="CommaExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of rename expression used with comma expression where both expressions are updating expressions. </description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/>
             <state time="0">
             	<query name="id-comma-expr-022" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-comma-expr-022-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-comma-expr-022.xml</output-file>  
             </state>
           </test-case> 
           <test-case  name="id-comma-expr-023" FilePath="CommaExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of a rename expression used with comma expression where first expression is an updating expression and the second one is ().</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/> 
             <state time="0">
             	<query name="id-comma-expr-023" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-comma-expr-023-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-comma-expr-023.xml</output-file>  
             </state>
           </test-case>      
           <test-case  name="id-comma-expr-024" FilePath="CommaExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluation of a rename expression used with comma expression where first expression is () and second expression is an updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/>
             <state time="0">
             	<query name="id-comma-expr-024" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-comma-expr-024-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-comma-expr-024.xml</output-file>  
             </state>
           </test-case>   
           <test-case  name="id-comma-expr-025" FilePath="CommaExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluation of a rename expression used with comma expression where first expression is an updating expression and the second one a call to fn:error().</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/> 
             <state time="0">
             	<query name="id-comma-expr-025" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<expected-error>FOER0000</expected-error> 
             </state>
           </test-case> 
           <test-case  name="id-comma-expr-026" FilePath="CommaExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluation of a rename expression used with comma expression where first expression is a call to fn:error() and the second one updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/> 
             <state time="0">
             	<query name="id-comma-expr-026" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<expected-error>FOER0000</expected-error>  
             </state>
           </test-case>  
           <test-case  name="id-comma-expr-027" FilePath="CommaExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluation of a rename expression used with comma expression where first expression is an updating expression and the second one is a mathematical expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/>
             <state time="0">
             	<query name="id-comma-expr-027" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>   
           <test-case  name="id-comma-expr-028" FilePath="CommaExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluation of a rename expression used with comma expression where first expression is a mathematical expression and second one is an updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/>
             <state time="0">
             	<query name="id-comma-expr-028" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>             	
             </state>
           </test-case>           
           <test-case  name="id-comma-expr-029" FilePath="CommaExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression together with a comma expression where both expressions are non-updating (transform) expressions.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/>
             <state time="0">
             	<query name="id-comma-expr-029" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-comma-expr-029.xml</output-file> 
             </state>
           </test-case>  
           <test-case  name="id-comma-expr-030" FilePath="CommaExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression together with a comma expression where the first expression is an non-updating (transform) expression. The second one is the empty sequence.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/>
             <state time="0">
             	<query name="id-comma-expr-030" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-comma-expr-030.xml</output-file> 
             </state>
           </test-case> 
           <test-case  name="id-comma-expr-031" FilePath="CommaExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression together with a comma expression where the first expression is the empty sequence and the second one is an non-updating (transform) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/>
             <state time="0">
             	<query name="id-comma-expr-031" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-comma-expr-031.xml</output-file> 
             </state>
           </test-case>   
           <test-case  name="id-comma-expr-032" FilePath="CommaExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression together with a comma expression where the first expression is an non-updating (transform) expression and the second one an invokation to "fn:error()".</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/>
             <state time="0">
             	<query name="id-comma-expr-032" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<expected-error>FOER0000</expected-error>
             </state>
           </test-case>  
           <test-case  name="id-comma-expr-033" FilePath="CommaExpression/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression together with a comma expression where the first expression is an invokation to "fn:error()" and the second one is an non-updating (transform) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/>
             <state time="0">
             	<query name="id-comma-expr-033" date="2007-06-01"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<expected-error>FOER0000</expected-error> 
             </state>
           </test-case>  
           <test-case  name="id-comma-expr-034" FilePath="CommaExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression together with a comma expression where the first expression is an non-updating (transform) expression and the second one is a mathematical expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/>
             <state time="0">
             	<query name="id-comma-expr-034" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<output-file role="principal" compare="Fragment">id-comma-expr-034.xml</output-file>
             </state>
           </test-case>  
           <test-case  name="id-comma-expr-035" FilePath="CommaExpression/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression together with a comma expression where the first expression is a mathematical expression and the second one is an non-updating (transform) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <spec-citation spec="XQUPDATE" section-number="2.5.4" section-title="Comma Expression" section-pointer="id-comma-expr"/>
             <state time="0">
             	<query name="id-comma-expr-035" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<output-file role="principal" compare="Fragment">id-comma-expr-035.xml</output-file>            	
             </state>
           </test-case>           
      </test-group>                 
      <test-group name="FunctionDeclaration">
        <GroupInfo>
            <title>Function Declaration and Updating Expressions</title>
            <description/>
         </GroupInfo>   
           <test-case  name="id-function-declaration-01" FilePath="FunctionDeclaration/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression used with an updating function and enclosed expression is also updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.6" section-title="Function Declaration" section-pointer="id-function-declaration"/>  
             <state time="0">
             	<query name="id-function-declaration-01" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-function-declaration-01-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-function-declaration-01.xml</output-file>   
             </state>
           </test-case>  
           <test-case  name="id-function-declaration-02" FilePath="FunctionDeclaration/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression used with non updating/non external function and enclosed expression is also updating expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.6" section-title="Function Declaration" section-pointer="id-function-declaration"/> 
             <state time="0">
             	<query name="id-function-declaration-02" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>             
           <test-case  name="id-function-declaration-03" FilePath="FunctionDeclaration/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression used with an updating/non external function and enclosed expression is an empty sequence.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.6" section-title="Function Declaration" section-pointer="id-function-declaration"/>  
             <state time="0">
             	<query name="id-function-declaration-03" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-function-declaration-03-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-function-declaration-03.xml</output-file>  
             </state>
           </test-case>  
           <test-case  name="id-function-declaration-04" FilePath="FunctionDeclaration/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates an update expression used with an updating/non external function and enclosed expression is a call to fn:error.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.6" section-title="Function Declaration" section-pointer="id-function-declaration"/> 
             <state time="0">
             	<query name="id-function-declaration-04" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<expected-error>FOER0000</expected-error>
             </state>
           </test-case>     
           <test-case  name="id-function-declaration-05" FilePath="FunctionDeclaration/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a mathematical expression used with an updating/non external function. Enclosed expression is a mathematical expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.6" section-title="Function Declaration" section-pointer="id-function-declaration"/>  
             <state time="0">
             	<query name="id-function-declaration-05" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0002</expected-error>              	
             </state>
           </test-case> 
           <test-case  name="id-function-declaration-06" FilePath="FunctionDeclaration/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a delete expression used with an updating function and enclosed expression is also updating (delete) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.6" section-title="Function Declaration" section-pointer="id-function-declaration"/>  
             <state time="0">
             	<query name="id-function-declaration-06" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-function-declaration-06-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-function-declaration-06.xml</output-file>
             </state>
           </test-case> 
           <test-case  name="id-function-declaration-07" FilePath="FunctionDeclaration/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a delete expression used with non updating/non external function and enclosed expression is an updating (delete)expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.6" section-title="Function Declaration" section-pointer="id-function-declaration"/>
             <state time="0">
             	<query name="id-function-declaration-07" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>             	
             </state>
           </test-case>                       
           <test-case  name="id-function-declaration-08" FilePath="FunctionDeclaration/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression used with an updating function and enclosed expression is also updating (replace) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.6" section-title="Function Declaration" section-pointer="id-function-declaration"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-function-declaration-08" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-function-declaration-08-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-function-declaration-08.xml</output-file>
             </state>
           </test-case> 
           <test-case  name="id-function-declaration-09" FilePath="FunctionDeclaration/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression used with non updating/non external function and enclosed expression is also updating (replace)expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.6" section-title="Function Declaration" section-pointer="id-function-declaration"/>
             <spec-citation spec="XQUPDATE" section-number="2.4.3.2" section-title="Replacing the Value of a Node" section-pointer="id-replacing-node-value"/>             
             <state time="0">
             	<query name="id-function-declaration-09" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>             	
             </state>
           </test-case>            
           <test-case  name="id-function-declaration-010" FilePath="FunctionDeclaration/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a rename expression used with an updating function and enclosed expression is also updating (rename) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.6" section-title="Function Declaration" section-pointer="id-function-declaration"/>
             <state time="0">
             	<query name="id-function-declaration-010" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             </state>
             <state time="1">
             	<query name="id-function-declaration-010-test" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-function-declaration-010.xml</output-file>
             </state>
           </test-case> 
           <test-case  name="id-function-declaration-011" FilePath="FunctionDeclaration/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a rename expression used with non updating/non external function and enclosed expression is also updating (rename) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.6" section-title="Function Declaration" section-pointer="id-function-declaration"/>
             <state time="0">
             	<query name="id-function-declaration-011" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>             	
             </state>
           </test-case>            
           <test-case  name="id-function-declaration-012" FilePath="FunctionDeclaration/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression used with an updating function and enclosed expression is also updating (transform) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <spec-citation spec="XQUPDATE" section-number="2.5.6" section-title="Function Declaration" section-pointer="id-function-declaration"/>
             <state time="0">
             	<query name="id-function-declaration-012" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<expected-error>XUST0002</expected-error>
             </state>
           </test-case> 
           <test-case  name="id-function-declaration-013" FilePath="FunctionDeclaration/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression used with non updating/non external function and enclosed expression is non updating (transform) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <spec-citation spec="XQUPDATE" section-number="2.5.6" section-title="Function Declaration" section-pointer="id-function-declaration"/>
             <state time="0">
             	<query name="id-function-declaration-013" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<output-file role="principal" compare="Fragment">id-function-declaration-013.xml</output-file>
             </state>             	
            </test-case>
            <test-case  name="id-function-declaration-014" FilePath="FunctionDeclaration/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluation of a function declaration declared as updating and a return type is specified.</description>
              <spec-citation spec="XQUPDATE" section-number="2.5.6" section-title="Function Declaration" section-pointer="id-function-declaration"/>
             <state time="0">
             	<query name="id-function-declaration-014" date="2007-08-07"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0028</expected-error>             	
             </state>
           </test-case>           
       </test-group>
      <test-group name="FunctionCall">
        <GroupInfo>
            <title>Function Calls and Updating Expressions</title>
            <description/>
         </GroupInfo>  
           <test-case  name="id-function-call-01" FilePath="FunctionCall/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates an insert expression as an parameter to a function call.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.1" section-title="Insert" section-pointer="id-insert"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.7" section-title="Function Call" section-pointer="id-function-call"/> 
             <state time="0">
             	<query name="id-function-call-01" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>
             </state>
           </test-case>               
           <test-case  name="id-function-call-02" FilePath="FunctionCall/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a delete expression as a parameter to a function call.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.2" section-title="Delete" section-pointer="id-delete"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.7" section-title="Function Call" section-pointer="id-function-call"/>              
             <state time="0">
             	<query name="id-function-call-02" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>
           <test-case  name="id-function-call-03" FilePath="FunctionCall/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a replace expression as a parameter to a function call.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.3" section-title="Replace" section-pointer="id-replace"/>
             <spec-citation spec="XQUPDATE" section-number="2.5.6" section-title="Function Declaration" section-pointer="id-function-declaration"/> 
             <spec-citation spec="XQUPDATE" section-number="2.4.3.1" section-title="Replacing a Node" section-pointer="id-replacing-node"/>             
             <state time="0">
             	<query name="id-function-call-03" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>               	
             </state>
           </test-case>             
           <test-case  name="id-function-call-04" FilePath="FunctionCall/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a rename expression as a parameter to a function call.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.6" section-title="Function Declaration" section-pointer="id-function-declaration"/>
             <state time="0">
             	<query name="id-function-call-04" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>             
           <test-case  name="id-function-call-05" FilePath="FunctionCall/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates a transform expression as a parameter to a function call.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.5" section-title="Transform" section-pointer="id-transform"/>  
             <spec-citation spec="XQUPDATE" section-number="2.5.6" section-title="Function Declaration" section-pointer="id-function-declaration"/>
             <state time="0">
             	<query name="id-function-call-05" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<output-file role="principal" compare="Fragment">id-function-call-05.xml</output-file>
             </state>
           </test-case>
           <test-case  name="id-function-call-06" FilePath="FunctionCall/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates a function call than contains two parameters, one updating (rename) and an integer.</description>
             <spec-citation spec="XQUPDATE" section-number="2.4.4" section-title="Rename" section-pointer="id-rename"/> 
             <spec-citation spec="XQUPDATE" section-number="2.5.7" section-title="Function Call" section-pointer="id-function-call"/>
             <state time="0">
             	<query name="id-function-call-06" date="2007-06-04"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>            
        </test-group>
      </test-group>
      <test-group name="OtherExpressions">
        <GroupInfo>
            <title>Tests for other Expressions not listed on the Update specs as able to use updating expressions.</title>
            <description/>
         </GroupInfo>   
           <test-case  name="id-other-expr-01" FilePath="OtherExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates usage of an updating expression (delete) in initializing expression for variable declaration.</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.8" section-title="Other Expressions" section-pointer="id-other-expr"/>  
             <state time="0">
             	<query name="id-other-expr-01" date="2007-08-06"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>   
           <test-case  name="id-other-expr-02" FilePath="OtherExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates usage of an updating expression (insert) in initializing expression for variable declaration.</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.8" section-title="Other Expressions" section-pointer="id-other-expr"/>  
             <state time="0">
             	<query name="id-other-expr-02" date="2007-08-06"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>  
           <test-case  name="id-other-expr-03" FilePath="OtherExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates usage of an updating expression (rename) in initializing expression for variable declaration.</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.8" section-title="Other Expressions" section-pointer="id-other-expr"/>  
             <state time="0">
             	<query name="id-other-expr-03" date="2007-08-06"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>  
           <test-case  name="id-other-expr-04" FilePath="OtherExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates usage of an updating expression (replace) in initializing expression for variable declaration.</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.8" section-title="Other Expressions" section-pointer="id-other-expr"/>  
             <state time="0">
             	<query name="id-other-expr-04" date="2007-08-06"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>    
           <test-case  name="id-other-expr-05" FilePath="OtherExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates usage of an non-updating expression (transform) in initializing expression for variable declaration.</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.8" section-title="Other Expressions" section-pointer="id-other-expr"/>  
             <state time="0">
             	<query name="id-other-expr-05" date="2007-08-06"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>             	
             	<output-file role="principal" compare="Fragment">id-other-expr-05.xml</output-file>
             </state>            
           </test-case> 
           <test-case  name="id-other-expr-06" FilePath="OtherExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates usage of an updating expression (delete) as part of a logical (and) expression and usage of fn:true() function.</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.8" section-title="Other Expressions" section-pointer="id-other-expr"/>  
             <state time="0">
             	<query name="id-other-expr-06" date="2007-08-09"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>   
           <test-case  name="id-other-expr-07" FilePath="OtherExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates usage of an updating expression (delete) as part of a logical (or) expression and usage of fn:true() function.</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.8" section-title="Other Expressions" section-pointer="id-other-expr"/>  
             <state time="0">
             	<query name="id-other-expr-07" date="2007-08-09"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>   
           <test-case  name="id-other-expr-08" FilePath="OtherExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates usage of an updating expression (delete) as part of a logical (and) expression and usage of fn:false() function.</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.8" section-title="Other Expressions" section-pointer="id-other-expr"/>  
             <state time="0">
             	<query name="id-other-expr-08" date="2007-08-09"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>   
           <test-case  name="id-other-expr-09" FilePath="OtherExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates usage of an updating expression (delete) as part of a logical (or) expression and usage of fn:false() function.</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.8" section-title="Other Expressions" section-pointer="id-other-expr"/>  
             <state time="0">
             	<query name="id-other-expr-09" date="2007-08-09"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>     
           <test-case  name="id-other-expr-010" FilePath="OtherExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates usage of an updating expression (rename) as part of a logical (and) expression and usage of fn:true() function.</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.8" section-title="Other Expressions" section-pointer="id-other-expr"/>  
             <state time="0">
             	<query name="id-other-expr-010" date="2007-08-09"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>  
           <test-case  name="id-other-expr-011" FilePath="OtherExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates usage of an updating expression (replace) as part of a logical (and) expression and usage of fn:true() function.</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.8" section-title="Other Expressions" section-pointer="id-other-expr"/>  
             <state time="0">
             	<query name="id-other-expr-011" date="2007-08-09"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>    
           <test-case  name="id-other-expr-012" FilePath="OtherExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates usage of an updating expression (insert) as part of a logical (and) expression and usage of fn:true() function.</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.8" section-title="Other Expressions" section-pointer="id-other-expr"/>  
             <state time="0">
             	<query name="id-other-expr-012" date="2007-08-09"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>
           <test-case  name="id-other-expr-013" FilePath="OtherExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates usage of an non updating expression (transform) as part of a logical (and) expression and usage of fn:true() function.</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.8" section-title="Other Expressions" section-pointer="id-other-expr"/>  
             <state time="0">
             	<query name="id-other-expr-013" date="2007-08-09"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Text">id-other-expr-013.txt</output-file>              	
             </state>
           </test-case>
           <test-case  name="id-other-expr-014" FilePath="OtherExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates usage of an updating expression (rename) as part of a Node Comparison (is) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.8" section-title="Other Expressions" section-pointer="id-other-expr"/>  
             <state time="0">
             	<query name="id-other-expr-014" date="2007-08-09"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>                       
           <test-case  name="id-other-expr-015" FilePath="OtherExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates usage of an updating expression (delete) as part of a Node Comparison (is) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.8" section-title="Other Expressions" section-pointer="id-other-expr"/>  
             <state time="0">
             	<query name="id-other-expr-015" date="2007-08-09"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>   
           <test-case  name="id-other-expr-016" FilePath="OtherExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates usage of an updating expression (replace) as part of a Node Comparison (is) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.8" section-title="Other Expressions" section-pointer="id-other-expr"/>  
             <state time="0">
             	<query name="id-other-expr-016" date="2007-08-09"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>    
           <test-case  name="id-other-expr-017" FilePath="OtherExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates usage of an non updating expression (transform) as part of a node comparison (is) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.8" section-title="Other Expressions" section-pointer="id-other-expr"/>  
             <state time="0">
             	<query name="id-other-expr-017" date="2007-08-09"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Text">id-other-expr-017.txt</output-file>              	
             </state>
           </test-case> 
           <test-case  name="id-other-expr-018" FilePath="OtherExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates usage of an non updating expression (transform) as part of a node comparison (is) expression (both operands are transform expressions).</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.8" section-title="Other Expressions" section-pointer="id-other-expr"/>  
             <state time="0">
             	<query name="id-other-expr-018" date="2007-08-09"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Text">id-other-expr-018.txt</output-file>              	
             </state>
           </test-case>                                        
           <test-case  name="id-other-expr-019" FilePath="OtherExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates usage of an updating expression (insert) as part of a Node Comparison (is) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.8" section-title="Other Expressions" section-pointer="id-other-expr"/>  
             <state time="0">
             	<query name="id-other-expr-019" date="2007-08-09"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>           
           <test-case  name="id-other-expr-020" FilePath="OtherExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates usage of an updating expression (insert) as part of a Value Comparison (eq operator) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.8" section-title="Other Expressions" section-pointer="id-other-expr"/>  
             <state time="0">
             	<query name="id-other-expr-020" date="2007-08-09"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>   
           <test-case  name="id-other-expr-021" FilePath="OtherExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates usage of an updating expression (rename) as part of a Value Comparison (ne operator) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.8" section-title="Other Expressions" section-pointer="id-other-expr"/>  
             <state time="0">
             	<query name="id-other-expr-021" date="2007-08-09"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case> 
           <test-case  name="id-other-expr-022" FilePath="OtherExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates usage of an updating expression (rename) as part of a Value Comparison (gt operator) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.8" section-title="Other Expressions" section-pointer="id-other-expr"/>  
             <state time="0">
             	<query name="id-other-expr-022" date="2007-08-09"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case> 
           <test-case  name="id-other-expr-023" FilePath="OtherExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates usage of an updating expression (rename) as part of a Value Comparison (lt operator) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.8" section-title="Other Expressions" section-pointer="id-other-expr"/>  
             <state time="0">
             	<query name="id-other-expr-023" date="2007-08-09"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>  
           <test-case  name="id-other-expr-024" FilePath="OtherExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates usage of an updating expression (rename) as part of a Value Comparison (le operator) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.8" section-title="Other Expressions" section-pointer="id-other-expr"/>  
             <state time="0">
             	<query name="id-other-expr-024" date="2007-08-09"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>
           <test-case  name="id-other-expr-025" FilePath="OtherExpressions/" scenario="runtime-error" Creator="Carmelo Montanez">
             <description>Evaluates usage of an updating expression (rename) as part of a Value Comparison (ge operator) expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.8" section-title="Other Expressions" section-pointer="id-other-expr"/>  
             <state time="0">
             	<query name="id-other-expr-025" date="2007-08-09"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>    
           <test-case  name="id-other-expr-26" FilePath="OtherExpressions/" scenario="runtime-error" Creator="armelo Montanez">
             <description>Evaluates usage of an updating expression (delete) as part of a sequence expression (union operator).</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.8" section-title="Other Expressions" section-pointer="id-other-expr"/>  
             <state time="0">
             	<query name="id-other-expr-026" date="2007-08-09"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>   
           <test-case  name="id-other-expr-027" FilePath="OtherExpressions/" scenario="runtime-error" Creator="armelo Montanez">
             <description>Evaluates usage of an updating expression (delete) as part of a sequence expression (intersect operator).</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.8" section-title="Other Expressions" section-pointer="id-other-expr"/>  
             <state time="0">
             	<query name="id-other-expr-027" date="2007-08-09"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>  
           <test-case  name="id-other-expr-028" FilePath="OtherExpressions/" scenario="runtime-error" Creator="armelo Montanez">
             <description>Evaluates usage of an updating expression (delete) as part of a sequence expression (except operator).</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.8" section-title="Other Expressions" section-pointer="id-other-expr"/>  
             <state time="0">
             	<query name="id-other-expr-028" date="2007-08-09"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>                                      
           <test-case  name="id-other-expr-029" FilePath="OtherExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates usage of a non updating expression (transform) as part of a sequence expression (union operator).</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.8" section-title="Other Expressions" section-pointer="id-other-expr"/>  
             <state time="0">
             	<query name="id-other-expr-029" date="2007-08-09"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-other-expr-029.xml</output-file>
             	<output-file role="principal" compare="Fragment">id-other-expr-029-2.xml</output-file>
             </state>
           </test-case> 
           <test-case  name="id-other-expr-030" FilePath="OtherExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates usage of a non updating expression (transform) as part of a sequence expression (intersect operator).</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.8" section-title="Other Expressions" section-pointer="id-other-expr"/>  
             <state time="0">
             	<query name="id-other-expr-030" date="2007-08-09"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Text">id-other-expr-030.txt</output-file>              	
             </state>
           </test-case>    
           <test-case  name="id-other-expr-031" FilePath="OtherExpressions/" scenario="standard" Creator="Carmelo Montanez">
             <description>Evaluates usage of a non updating expression (transform) as part of a sequence expression (except operator).</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.8" section-title="Other Expressions" section-pointer="id-other-expr"/>  
             <state time="0">
             	<query name="id-other-expr-031" date="2007-08-09"/>
             	<input-file role="principal-data" variable="input-context">works-mod</input-file>
             	<output-file role="principal" compare="Fragment">id-other-expr-031.xml</output-file>              	
             </state>
           </test-case>  
           <test-case  name="id-other-expr-032" FilePath="OtherExpressions/" scenario="runtime-error" Creator="armelo Montanez">
             <description>Evaluates usage of an updating expression (delete) as part of a range expression.</description>
             <spec-citation spec="XQUPDATE" section-number="2.5.8" section-title="Other Expressions" section-pointer="id-other-expr"/>  
             <state time="0">
             	<query name="id-other-expr-032" date="2007-08-09"/>
             	<input-file role="principal-data" variable="input-context">employeesNIST</input-file>
             	<expected-error>XUST0001</expected-error>              	
             </state>
           </test-case>                                       
      </test-group>   
      <test-group name="ParenthesizedExpressions">
        <GroupInfo>
            <title>Tests for Parenthesized Expressions.</title>
            <description/>
         </GroupInfo>               
     </test-group>
     <test-group name="UpdatePrimitives">
      <GroupInfo>
         <title>XML Query Update Primitives</title>
         <description/>
       </GroupInfo>
      <test-group name = "updinsertBefore">
       <GroupInfo>      
         <title>upd:insertBefore Primitive</title>
         <description/>
        </GroupInfo>      
      </test-group>
      <test-group name = "updinsertAfter">
       <GroupInfo>      
         <title>upd:insertAfter Primitive</title>
         <description/>
        </GroupInfo>      
      </test-group>
      <test-group name = "updinsertInto">
       <GroupInfo>      
         <title>upd:insertInto Primitive</title>
         <description/>
        </GroupInfo>      
      </test-group>
      <test-group name = "updinsertIntoAsFirst">
       <GroupInfo>      
         <title>upd:insertIntoAsFirst Primitive</title>
         <description/>
        </GroupInfo>      
      </test-group>  
      <test-group name = "updinsertIntoAsLast">
       <GroupInfo>      
         <title>upd:insertIntoAsLast Primitive</title>
         <description/>
        </GroupInfo>      
      </test-group>  
      <test-group name = "updinsertAttributes">
       <GroupInfo>      
         <title>upd:insertAttributes Primitive</title>
         <description/>
        </GroupInfo>      
      </test-group>
      <test-group name = "updDelete">
       <GroupInfo>      
         <title>upd:delete Primitive</title>
         <description/>
        </GroupInfo>      
      </test-group> 
      <test-group name = "updReplaceNode">
       <GroupInfo>      
         <title>upd:replaceNode Primitive</title>
         <description/>
        </GroupInfo>      
      </test-group> 
      <test-group name = "updReplaceValue">
       <GroupInfo>      
         <title>upd:replaceValue Primitive</title>
         <description/>
        </GroupInfo>      
      </test-group> 
      <test-group name = "updReplaceElementContent">
       <GroupInfo>      
         <title>upd:replaceElementContent Primitive</title>
         <description/>
        </GroupInfo>      
      </test-group>
      <test-group name = "updRename">
       <GroupInfo>      
         <title>upd:rename Primitive</title>
         <description/>
        </GroupInfo>      
      </test-group>                                    
     </test-group>
  </test-group>
</test-suite>